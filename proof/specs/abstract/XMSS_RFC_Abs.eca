require import AllCore List IntDiv Distr.
require (*--*) Subtype.

from Jasmin require import JModel.
require import XMSS_Params.

require WOTS_RFC_Abs.
clone include WOTS_RFC_Abs.

import Address BaseW.
import Array8.


(******************************************************************************)
(* Types *)
subtype auth_path as AuthPath = { l : nbytes list | size l = h }.
realize inhabited.
proof.
by exists (nseq h witness); smt(size_nseq ge0_h).
qed.

type xmss_sk = { idx : W32.t ;
                 sk_seed : nbytes ; (* secret *)
                 sk_prf : nbytes ;
                 pub_seed_sk : nbytes ; (* public *)
                 sk_root : nbytes }.

type xmss_pk = { pk_oid : W32.t ;
                 pk_root : nbytes ;
                 pk_pub_seed : nbytes }.

type xmss_keypair = xmss_sk * xmss_pk.

type sig_t = { sig_idx : W32.t;
               r : nbytes ;
               r_sig : (wots_signature * auth_path) }.

type msg_t = W8.t list.


(******************************************************************************)
(* Operators/Oracles *)

(* Corresponds to mkg in security spec *)
op prf : nbytes -> nbytes -> nbytes.

(* Corresponds to pkco in security spec (modulo lifting input type to bool list) *)
op ltree : seed -> adrs -> wots_pk -> nbytes.

(* Corresponds to trh in security spec (modulo concatenating two inputs and lifting type to bool list) *)
op rand_hash : seed -> adrs -> nbytes -> nbytes -> nbytes.

(*
  Used for message compression oracle, corresponds to mco/MCO in security spec
  (modulo concatenating public values to output)
*)
module type Oracle = {
  proc o(mkm : threen_bytes * W8.t list) : nbytes
}.


(**********************************************************************************************)
(* Auxiliary: Treehash/Treesig/RootFromSig *)

(* It is REQUIRED that s % 2^t = 0, i.e., that the leaf at index s is a leftmost leaf of a sub-tree of height t.
pred leftmost_leaf (s t : int)  = s %% 2^t = 0.

(* Precondition *)
pred treehash_p (s t : int) = s %% (1 `<<` t) <> 0.
*)

op nbytes_witness : nbytes = NBytes.insubd (nseq n witness).


module TreeHash = {
  (* Computes the root *)
  proc treehash(pub_seed sk_seed : seed, s t : int, address : adrs) : nbytes = {
    var node : nbytes;
    var stack : nbytes list <- nseq (h  + 1) witness;
    var heights : W32.t list <- nseq (h + 1) witness; (* Used to manage the height of nodes *)
    var pk : wots_pk;
    var offset : W64.t;
    var i, j : int;
    var tree_index : W32.t;
    var node0, node1, new_node : nbytes;


    offset <- W64.zero;
    i <- 0;
    while (i < 2^t) {
      address <- set_type address 0;
      address <- set_ots_addr address (s + i);

      (* Generate the public key from the secret seed *)
      pk <@ WOTS.pkGen(sk_seed, pub_seed, address);

      address <- set_type address 1;
      address <- set_ltree_addr address (s + i);

      (* compress the WOTS public key into a single N-byte value *)
      (* TODO: Replace ltree with THF corresponding to `pkco` in security spec
      node <@ LTree.ltree(pk, address, pub_seed);
      *)
      node <- ltree pub_seed address pk;

      stack <- put stack (to_uint offset) node; (* Push the node onto the stack *)
      offset <- offset + W64.one;
      heights <- put heights (to_uint (offset - W64.one)) W32.zero;

      address <- set_type address 2;

      while (
          (of_int 2)%W64 \ule offset /\ (* The stack needs to have at least two nodes *)
          nth witness heights (to_uint (offset - W64.one)) =
             nth witness heights (to_uint (offset - (of_int 2)%W64))
      ) {
          tree_index <- W32.of_int(s + i) `>>` truncateu8 (((nth witness heights (to_uint (offset - W64.one))) + W32.one) `&` (of_int 31)%W32);

          address <- set_tree_height address (to_uint (nth witness heights (to_uint (offset - W64.one))));
          address <- set_tree_index address (W32.to_uint tree_index);

          node0 <- nth nbytes_witness stack (to_uint (offset - W64.of_int 2));
          node1 <- nth nbytes_witness stack (to_uint (offset - W64.one));
          (* TODO: Replace rand_hash with THF corresponding to `trh` in security spec
          new_node <@ Hash.rand_hash(node0, node1, pub_seed, address);
          *)
          new_node <- rand_hash pub_seed address node0 node1;

          stack <- put stack (to_uint (offset - W64.of_int 2)) new_node; (* push new node onto the stack *)
          offset <- offset - W64.one; (* One less node on the stack (removed node0 and node1 and added new_node) *)
          heights <- put heights
                   (to_uint (offset - W64.one))
                   (nth witness heights (to_uint (offset - W64.one)) + W32.one); (* The new node is one level higher than the nodes used to compute it *)
      }

      i <- i + 1;
    }

    node <- nth witness stack 0;
    return node;
  }
}.

module TreeSig = {
  (* Compute the authentication path for the i-th WOTS+ key pair *)
  proc buildAuthPath(pub_seed sk_seed : seed, idx : W32.t, address : adrs) : auth_path = {
    var authentication_path : nbytes list;
    var j : int <- 0;
    var k : int;
    var t : nbytes <- witness;

    authentication_path <- nseq h witness;

    while (j < h) {
      (* k <- floor((W32.to_uint idx)%r / (2^j)%r); XOR ONE *)
      k <- to_uint ((idx `>>` (of_int j)%W8) `^` W32.one); (* Does this make sense ???? I think so *)
      t <@ TreeHash.treehash(pub_seed,sk_seed, k * (2^j), j, address);
      authentication_path <- put authentication_path j t;
      j <- j + 1;
    }

    return AuthPath.insubd authentication_path;
  }

  (*
   Algorithm 11: treeSig - Generate a WOTS+ signature on a message with
   corresponding authentication path

     Input: n-byte message M', XMSS private key SK
            signature index idx_sig, ADRS
     Output: Concatenation of WOTS+ signature sig_ots and
             authentication path auth
  *)
  proc treesig(M : nbytes, sk : xmss_sk, idx : W32.t, address : adrs) : wots_signature * auth_path  = {
    var auth : auth_path;
    var sig_ots : wots_signature;
    var ots_sk : wots_sk;
    var sk_seed : nbytes <- sk.`sk_seed;
    var pub_seed : nbytes <- sk.`pub_seed_sk;

    auth <@ buildAuthPath (pub_seed,sk_seed, idx, address);
    address <- set_type address 0;
    address <- set_ots_addr address (W32.to_uint idx);

    sig_ots <@ WOTS.sign_seed(NBytes.val M, sk_seed, pub_seed, address);

    return (sig_ots, auth);
  }
}.

(* Compute root from signature *)
module RootFromSig = {
  proc rootFromSig(idx_sig : W32.t, sig_ots : wots_signature, auth : auth_path, M : nbytes,
                   _seed : seed, address : adrs): nbytes = {
    var pk_ots : wots_pk;
    var k : int;
    var nodes0, nodes1 : nbytes;
    var index : int;
    var auth_k : nbytes;

    address <- set_type address 0;
    address <- set_ots_addr address (W32.to_uint idx_sig);

    pk_ots <@ WOTS.pkFromSig(M, sig_ots, _seed, address);

    address <- set_type address 1;
    address <- set_ltree_addr address (W32.to_uint idx_sig);
    (* TODO: Replace ltree with THF corresponding to `pkco` in security spec
    nodes0 <@ LTr.ltree(pk_ots, address, _seed); *)
    nodes0 <- ltree _seed address pk_ots;

    address <- set_type address 2;
    address <- set_tree_index address (W32.to_uint idx_sig);

    k <- 0;
    while (k < h) {
      address <- set_tree_height address k;

      if (floor ((W32.to_uint idx_sig)%r / (2^k)%r) %% 2 = 0) {
        index <- get_tree_index address;
        address <- set_tree_index address (index %/ 2);

        auth_k <- nth witness (AuthPath.val auth) k;
        (* TODO: Replace rand_hash with THF corresponding to `trh` in security spec
        nodes1 <@ Hash.rand_hash (nodes0, auth_k, _seed, address);
        *)
        nodes1 <- rand_hash _seed address nodes0 auth_k;
      } else {
        index <- get_tree_index address;
        address <- set_tree_index address ((index - 1) %/ 2);

        auth_k <- nth witness (AuthPath.val auth) k;
        (* TODO: Replace rand_hash with THF corresponding to `trh` in security spec
        nodes1 <@ Hash.rand_hash (auth_k, nodes0, _seed, address);
        *)
        nodes1 <- rand_hash _seed address auth_k nodes0;
      }

      nodes0 <- nodes1;
      k <- k + 1;
    }

    return nodes0;
  }
}.



module XMSS_RFC_Abs (H_msg : Oracle) = {
  proc sample_randomness () : nbytes * nbytes * nbytes = {
    var sk_seed, sk_prf, pub_seed : W8.t list;

    sk_seed  <$ DList.dlist W8.dword n;
    sk_prf   <$ DList.dlist W8.dword n;
    pub_seed <$ DList.dlist W8.dword n;

    return (NBytes.insubd sk_seed, NBytes.insubd sk_prf, NBytes.insubd pub_seed);
  }

   proc kg() : xmss_keypair = {
      var pk : xmss_pk <- witness;
      var sk : xmss_sk <- witness;

      var sk_seed, sk_prf, pub_seed, root : nbytes;

      var address : adrs <- zero_address;
      address <- set_layer_addr address 0;

      (sk_seed, sk_prf, pub_seed) <@ sample_randomness();

      sk <- {| idx=W32.zero;
               sk_seed=sk_seed;
               sk_prf=sk_prf;
               pub_seed_sk=pub_seed;
               sk_root=witness;
             |};

      root <@ TreeHash.treehash(pub_seed, sk_seed, 0, h, address);

      sk <- {| idx=W32.zero;
               sk_seed=sk_seed;
               sk_prf=sk_prf;
               pub_seed_sk=pub_seed;
               sk_root=root;
             |};

      pk <- {| pk_oid=impl_oid; pk_root=root; pk_pub_seed=pub_seed |};

      return (sk, pk);
  }

  proc sign(sk : xmss_sk, m : msg_t) : sig_t * xmss_sk = {
    var idx : W32.t;
    var idx_new : W32.t;
    var address : adrs;
    var _R : nbytes;
    var _M' : nbytes;
    var ots_sig : wots_signature;
    var auth : auth_path;
    var sig : sig_t;
    var idx_bytes : nbytes;
    var idx_nbytes : nbytes;
    var root : nbytes;
    var t : threen_bytes;
    var sk_prf : nbytes <- sk.`sk_prf;

    idx <- sk.`idx;
    idx_new <- sk.`idx + W32.one;
    sk <- {| sk with idx=idx_new |};
    address <- zero_address;

    idx_bytes <- NBytes.insubd (toByte idx n);

    (* TODO: Replace with KHF corresponding to mkg in security spec
    _R <@ Hash.prf(idx_bytes, sk_prf);
    *)
    _R <- prf sk_prf idx_bytes;

    root <- sk.`sk_root;
    t <- ThreeNBytesBytes.insubd (NBytes.val _R ++ NBytes.val root ++ NBytes.val idx_bytes);

    (* TODO: Replace H_msg with relevant RO
    _M' <- H_msg t m;
    *)
    _M' <@ H_msg.o((t, m));

    (ots_sig, auth) <@ TreeSig.treesig(_M', sk, idx, address);

    sig <- {| sig_idx = idx; r = _R ; r_sig = (ots_sig, auth) |};

    return (sig, sk);
  }

  proc verify(pk : xmss_pk, m : msg_t, s : sig_t) : bool = {
    var is_valid : bool;
    var idx_sig : W32.t;
    var idx_bytes : nbytes;
    var node, root, _R, _M': nbytes;
    var auth : auth_path;
    var sig_ots : wots_signature;
    var _seed : seed;
    var address : adrs;
    var t : threen_bytes;

    idx_sig <- s.`sig_idx;
    idx_bytes <- NBytes.insubd (toByte idx_sig n);
    _seed <- pk.`pk_pub_seed;
    address <- zero_address;
    (sig_ots,auth) <- s.`r_sig;

    root <- pk.`pk_root;
    _R <- s.`r;
    t <- ThreeNBytesBytes.insubd (NBytes.val _R ++ NBytes.val root ++ NBytes.val idx_bytes);

    (* TODO: Replace H_msg with relevant RO
    _M' <- H_msg t m;
    *)
    _M' <@ H_msg.o((t, m));

    node <@ RootFromSig.rootFromSig(idx_sig, sig_ots, auth, _M', _seed, address);

    is_valid <- (node = root);

    return is_valid;
  }
}.
