(* --- Require/Import --- *)
(* -- Built-In (Standard Library) -- *)
require import AllCore.

(* --- Generic types/datastructures --- *)
(* - Binary trees - *)
type 'a bintree = [
    Leaf of 'a
  | Node of 'a bintree & 'a bintree
].

(* Computes height, i.e., the number of levels to the furthest leaf, of a binary tree *)
op height (bt : 'a bintree) =
  with bt = Leaf _ => 0
  with bt = Node l r => 1 + max (height l) (height r).

(*
  Determines whether a binary tree is perfect of a given height.
*)
op perfectOfHeight (bt : 'a bintree) (n : int) =
  with bt = Leaf _ => n = 0
  with bt = Node l r => perfectOfHeight l (n - 1) /\ perfectOfHeight r (n - 1).

lemma height_eq_of_perfectOfHeight :
  forall (bt : 'a bintree) (n : int), perfectOfHeight bt n => height bt = n.
proof.
  elim => // /= ? ? Hl Hr ? [Hl2 Hr2].
  by rewrite (Hl _ Hl2) // (Hr _ Hr2).
qed.

(*
  Determines whether a binary tree is perfect.
*)
op perfect (bt : 'a bintree) = perfectOfHeight bt (height bt).

lemma perfect_leaf (x : 'a) : perfect (Leaf x). proof. trivial. qed.

lemma height_eq_of_perfect_node (l r : 'a bintree) :
  perfect (Node l r) => height l = height r.
proof.
  move => [Hl Hr].
  by rewrite (height_eq_of_perfectOfHeight _ _ Hl) // (height_eq_of_perfectOfHeight _ _ Hr).
qed.

lemma pefect_left_of_perfect_node (l r : 'a bintree) :
 perfect (Node l r) => perfect l.
proof.
 move => Hlr.
 have Hlr2 : height l = height r. by exact: height_eq_of_perfect_node l r Hlr.
 move : Hlr => [Hl Hr].
 rewrite /=  (height_eq_of_perfectOfHeight _ _ Hr) in Hl.
 exact : Hl.
qed.  
lemma perfect_node (l r : 'a bintree) :
 perfect (Node l r) <=> height l = height r /\ perfect l /\ perfect r.
proof.
  rewrite /perfect.
  simplify.
qed.


(*
  Determines whether a binary tree is fully balanced, i.e.
  whether all leaves are on the same level
*)
op fully_balanced (bt : 'a bintree) =
  with bt = Leaf _ => true
  with bt = Node l r => height l = height r /\ fully_balanced l /\ fully_balanced r.


lemma fully_balanced_of_perfectOfHeight :
  forall (bt : 'a bintree) (n : int), perfectOfHeight bt n => fully_balanced bt.
proof.
  elim => // /= ? ? Hl Hr ? [Hl2 Hr2].
  by rewrite (Hl _ Hl2) // (Hr _ Hr2) //
  (height_eq_of_perfectOfHeight _ _ Hl2) // (height_eq_of_perfectOfHeight _ _ Hr2).
qed.

lemma perfectOfHeight_of_height_eq_of_fully_balanced :
  forall (bt : 'a bintree) (n : int), height bt = n =>
  fully_balanced bt => perfectOfHeight bt n.
proof.
  elim => // /= ? ? Hl Hr ? Hn [Hlr [Hl2 Hr2]].
  by rewrite -Hn // Hlr (Hl _ Hlr Hl2) (Hr _ _ Hr2).
qed.


lemma perfect_iff_fully_balanced (bt : 'a bintree) : fully_balanced bt <=> perfect bt.
proof.
  rewrite /perfect. split.
  - by apply perfectOfHeight_of_height_eq_of_fully_balanced.
  - by apply fully_balanced_of_perfectOfHeight.
qed.
