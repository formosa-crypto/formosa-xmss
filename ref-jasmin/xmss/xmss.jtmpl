from XMSS require "params.jinc"
from XMSS require "xmss_core/xmss_core.jtmpl"

// This file provides wrapper functions that take keys that include OIDs to
// identify the parameter set to be used. After setting the parameters accordingly
// it falls back to the regular XMSS core functions.

inline fn  __xmss_keypair(
    reg ptr u8[XMSS_OID_LEN + XMSS_PK_BYTES] pk, 
    reg ptr u8[XMSS_OID_LEN + XMSS_SK_BYTES] sk
) -> reg ptr u8[XMSS_OID_LEN + XMSS_PK_BYTES],
     reg ptr u8[XMSS_OID_LEN + XMSS_SK_BYTES]
{
    inline int i;
    reg u32 oid;

    oid = XMSS_OID;
    oid = #BSWAP_32(oid);
    
    pk[u32 0] = oid;
    sk[u32 0] = oid;

    pk[XMSS_OID_LEN : XMSS_PK_BYTES], sk[XMSS_OID_LEN : XMSS_SK_BYTES] = 
        __xmssmt_core_keypair_(pk[XMSS_OID_LEN : XMSS_PK_BYTES], sk[XMSS_OID_LEN : XMSS_SK_BYTES]);

    return pk, sk;
}

inline fn  __xmssmt_keypair(
    reg ptr u8[XMSS_OID_LEN + XMSS_PK_BYTES] pk, 
    reg ptr u8[XMSS_OID_LEN + XMSS_SK_BYTES] sk
) -> reg ptr u8[XMSS_OID_LEN + XMSS_PK_BYTES],
     reg ptr u8[XMSS_OID_LEN + XMSS_SK_BYTES]
{
    inline int i;
    reg u32 oid;

    oid = XMSS_OID;
    oid = #BSWAP_32(oid);
    
    pk[u32 0] = oid;
    sk[u32 0] = oid;

    pk[XMSS_OID_LEN : XMSS_PK_BYTES], sk[XMSS_OID_LEN : XMSS_SK_BYTES] = 
        __xmssmt_core_keypair_(pk[XMSS_OID_LEN : XMSS_PK_BYTES], sk[XMSS_OID_LEN : XMSS_SK_BYTES]);

    return pk, sk;
}

inline fn __xmss_sign(
    reg ptr u8[XMSS_OID_LEN + XMSS_SK_BYTES] sk,
    reg u64 sm_ptr smlen_ptr,
    reg u64 m_ptr mlen
) -> reg ptr u8[XMSS_OID_LEN + XMSS_SK_BYTES], reg u64
{
    reg u32 oid;
    reg u64 res;

    sk[XMSS_OID_LEN : XMSS_SK_BYTES], res = 
        __xmssmt_core_sign(sk[XMSS_OID_LEN : XMSS_SK_BYTES], sm_ptr, smlen_ptr, m_ptr, mlen);

    return sk, res;
}

inline fn __xmssmt_sign(
    reg ptr u8[XMSS_OID_LEN + XMSS_SK_BYTES] sk,
    reg u64 sm_ptr smlen_ptr,
    reg u64 m_ptr mlen
) -> reg ptr u8[XMSS_OID_LEN + XMSS_SK_BYTES], reg u64
{
    reg u32 oid;
    reg u64 res;

    sk[XMSS_OID_LEN : XMSS_SK_BYTES], res = 
        __xmssmt_core_sign(sk[XMSS_OID_LEN : XMSS_SK_BYTES], sm_ptr, smlen_ptr, m_ptr, mlen);

    return sk, res;
}

inline fn __xmss_sign_open(
    reg ptr u8[XMSS_OID_LEN + XMSS_PK_BYTES] pk,
    reg u64 m_ptr mlen_ptr sm_ptr smlen
) -> reg u64
{
    reg u32 oid;
    reg u64 res;

    res = __xmssmt_core_sign_open_(m_ptr, mlen_ptr, sm_ptr, smlen, pk[XMSS_OID_LEN : XMSS_PK_BYTES]);
    return res;
}

inline fn __xmssmt_sign_open(
    reg ptr u8[XMSS_OID_LEN + XMSS_PK_BYTES] pk,
    reg u64 m_ptr mlen_ptr sm_ptr smlen
) -> reg u64
{
    reg u32 oid;
    reg u64 res;

    res = __xmssmt_core_sign_open_(m_ptr, mlen_ptr, sm_ptr, smlen, pk[XMSS_OID_LEN : XMSS_PK_BYTES]);
    return res;
}
