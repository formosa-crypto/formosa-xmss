from Stdlib require "memcpy/memcpy.jtmpl"
from Stdlib require "bytes/bytes.jtmpl"
from XMSS require "hash_address/hash_address.jinc"

inline fn __addr_to_bytes(
    reg ptr u8[32] addr_as_bytes,
    reg ptr u32[8] addr
) -> reg ptr u8[32]
{
    inline int i;
    reg ptr u8[4] buf; 

    for i=0 to 8 {
        buf = addr_as_bytes[4*i : 4];
        buf = __u32_to_bytes(buf, addr[i]);
        addr_as_bytes[4*i : 4] = buf;
    }

    return addr_as_bytes;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

inline fn __prf(
    reg ptr u8[XMSS_N] out,
    reg ptr u8[32] in,
    reg ptr u8[XMSS_N] key
) -> reg ptr u8[XMSS_N]
{
    stack u8[XMSS_PADDING_LEN + XMSS_N + 32] buf; // buf = padding || key || in
    reg ptr u8[XMSS_PADDING_LEN] padding_buf;
    
    // ull_to_bytes(buf, params->padding_len, XMSS_HASH_PADDING_PRF);
    padding_buf = buf[0:XMSS_PADDING_LEN];
    padding_buf = __ull_to_bytes<XMSS_PADDING_LEN>(padding_buf, XMSS_HASH_PADDING_PRF);
    buf[0:XMSS_PADDING_LEN] = padding_buf;

    // memcpy(buf + params->padding_len, key, params->n);
    buf[XMSS_PADDING_LEN : XMSS_N] = _x_memcpy_u8u8<XMSS_N, XMSS_N>(buf[XMSS_PADDING_LEN : XMSS_N], key);

    // memcpy(buf + params->padding_len + params->n, in, 32);
    buf[XMSS_PADDING_LEN + XMSS_N : 32] = _x_memcpy_u8u8<32, 32>(buf[XMSS_PADDING_LEN + XMSS_N : 32], in);

    // out = __core_hash_ <OUTLEN, XMSS_PADDING_LEN + XMSS_N + 32>(out, buf_p);
    out = __core_hash_<XMSS_PADDING_LEN + XMSS_N + 32>(out, buf);

    return out;
}//<>

fn _prf(
    reg ptr u8[XMSS_N] out,
    reg ptr u8[32] in,
    reg ptr u8[XMSS_N] key
) -> reg ptr u8[XMSS_N]
{
    out = __prf(out, in, key);
    return out;
}//<>

inline fn __prf_(
    reg ptr u8[XMSS_N] out,
    reg ptr u8[32] in,
    reg ptr u8[XMSS_N] key
) -> reg ptr u8[XMSS_N]
{
    out = out; in = in; key = key;
    out = _prf(out, in, key);
    out = out;
    return out;
}//<>

////////////////////////////////////////////////////////////////////////////////////////////////////

inline fn __prf_keygen(
    reg ptr u8[XMSS_N] out,
    reg ptr u8[XMSS_N + 32] in,
    reg ptr u8[XMSS_N] key
) -> reg ptr u8[XMSS_N]
{
    stack u8[XMSS_PADDING_LEN + 2*XMSS_N + 32] buf; // buf = padding || key || in
    reg ptr u8[XMSS_PADDING_LEN] padding_buf;

    // ull_to_bytes(buf, params->padding_len, XMSS_HASH_PADDING_PRF_KEYGEN); 
    padding_buf = buf[0:XMSS_PADDING_LEN];
    padding_buf = __ull_to_bytes<XMSS_PADDING_LEN>(padding_buf, XMSS_HASH_PADDING_PRF_KEYGEN);
    buf[0:XMSS_PADDING_LEN] = padding_buf;

    // memcpy(buf + params->padding_len, key, params->n);
    buf[XMSS_PADDING_LEN : 32] = _x_memcpy_u8u8<32, XMSS_N>(buf[XMSS_PADDING_LEN : 32], key);

    // memcpy(buf + params->padding_len + params->n, in, params->n + 32);
    buf[XMSS_PADDING_LEN + XMSS_N : XMSS_N + 32] =
        _x_memcpy_u8u8<XMSS_N + 32, XMSS_N + 32>(buf[XMSS_PADDING_LEN + XMSS_N : XMSS_N + 32], in);

    // core_hash(params, out, buf, params->padding_len + 2*params->n + 32);
    out = __core_hash_<XMSS_PADDING_LEN + 2*XMSS_N + 32>(out, buf); 

    return out; 
}

fn _prf_keygen(
    reg ptr u8[XMSS_N] out,
    reg ptr u8[XMSS_N + 32] in,
    reg ptr u8[XMSS_N] key
) -> reg ptr u8[XMSS_N]
{
    out = __prf_keygen(out, in, key);
    return out;
}

inline fn __prf_keygen_(
    reg ptr u8[XMSS_N] out,
    reg ptr u8[XMSS_N + 32] in,
    reg ptr u8[XMSS_N] key
) -> reg ptr u8[XMSS_N]
{
    out = out; in = in; key = key;

    out = _prf_keygen(out, in, key);

    return out;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

inline fn __hash_message(
    reg ptr u8[XMSS_N] mhash,
    reg ptr u8[XMSS_N] R,
    reg ptr u8[XMSS_N] root,
    reg u64 idx,
    reg u64 m_with_prefix_ptr mlen
) -> reg ptr u8[XMSS_N]
{
    reg u64 offset len;
    stack u8[XMSS_PADDING_LEN] buf;
    stack u8[XMSS_N] buf_n;

    // ull_to_bytes(m_with_prefix, params->padding_len, XMSS_HASH_PADDING_HASH);
    buf = __ull_to_bytes<XMSS_PADDING_LEN>(buf, XMSS_HASH_PADDING_HASH);

    offset = 0;
    m_with_prefix_ptr, offset = _x_memcpy_u8pu8<XMSS_PADDING_LEN>(m_with_prefix_ptr, offset, buf);

    // memcpy(m_with_prefix + params->padding_len, R, params->n);
    offset = XMSS_PADDING_LEN;
    m_with_prefix_ptr, offset = _x_memcpy_u8pu8<XMSS_N>(m_with_prefix_ptr, offset, R);
    
    // memcpy(m_with_prefix + params->padding_len + params->n, root, params->n);
    offset = XMSS_PADDING_LEN + XMSS_N;
    m_with_prefix_ptr, offset = _x_memcpy_u8pu8<XMSS_N>(m_with_prefix_ptr, offset, root);

    // ull_to_bytes(m_with_prefix + params->padding_len + 2*params->n, params->n, idx);
    buf_n = __ull_to_bytes<XMSS_N>(buf_n, idx);
    offset = XMSS_PADDING_LEN + 2*XMSS_N;
    m_with_prefix_ptr, offset = _x_memcpy_u8pu8<XMSS_N>(m_with_prefix_ptr, offset, buf_n);

    // core_hash(params, out, m_with_prefix, mlen + params->padding_len + 3*params->n);
    len = mlen;
    len += XMSS_PADDING_LEN + 3*XMSS_N;
    mhash = __core_hash_in_ptr_(mhash, m_with_prefix_ptr, len);
    return mhash;
}

fn _hash_message(
    reg ptr u8[XMSS_N] mhash,
    reg ptr u8[XMSS_N] R,
    reg ptr u8[XMSS_N] root,
    reg u64 idx,
    reg u64 m_with_prefix_ptr mlen
) -> reg ptr u8[XMSS_N]
{
    mhash = __hash_message(mhash, R, root, idx, m_with_prefix_ptr, mlen);
    return mhash;
}

inline fn __hash_message_(
    reg ptr u8[XMSS_N] mhash,
    reg ptr u8[XMSS_N] R,
    reg ptr u8[XMSS_N] root,
    reg u64 idx,
    reg u64 m_with_prefix_ptr mlen
) -> reg ptr u8[XMSS_N]
{   
    mhash = mhash;
    R = R;
    root = root;
    idx = idx;
    m_with_prefix_ptr = m_with_prefix_ptr;
    mlen = mlen;

    mhash = _hash_message(mhash, R, root, idx, m_with_prefix_ptr, mlen);

    mhash = mhash;

    return mhash;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

// NOTE: `in` and `out` are not necessarily disjoint in the reference implementation (e.g. in compute root)
//        in that case, we copy the value of in to a buffer and write to out
inline fn __thash_h(
    reg ptr u8[XMSS_N] out,
    reg ptr u8[2 * XMSS_N] in,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8] 
{
    stack u8[XMSS_PADDING_LEN + 3*XMSS_N] buf;
    stack u8[2*XMSS_N] bitmask;
    stack u8[32] addr_as_bytes;

    reg u8 t ;
    reg u64 i;

    // ull_to_bytes(buf, params->padding_len, XMSS_HASH_PADDING_H);
    buf[0:XMSS_PADDING_LEN] = __ull_to_bytes<XMSS_PADDING_LEN>(buf[0:XMSS_PADDING_LEN], XMSS_HASH_PADDING_H);

    // set_key_and_mask(addr, 0);
    addr = __set_key_and_mask(addr, 0);

    // addr_to_bytes(addr_as_bytes, addr);
    addr_as_bytes = __addr_to_bytes(addr_as_bytes, addr);

    () = #spill(in, out, addr, pub_seed);
    
    // prf(params, buf + params->padding_len, addr_as_bytes, pub_seed);
    buf[XMSS_PADDING_LEN : XMSS_N] = __prf_(buf[XMSS_PADDING_LEN : XMSS_N], addr_as_bytes, pub_seed);

    () = #unspill(addr);

    // set_key_and_mask(addr, 1);
    addr = __set_key_and_mask(addr, 1);

    // addr_to_bytes(addr_as_bytes, addr);
    addr_as_bytes = __addr_to_bytes(addr_as_bytes, addr);

    () = #spill(addr);

    // prf(params, bitmask, addr_as_bytes, pub_seed);
    () = #unspill(pub_seed);
    bitmask[0 : XMSS_N] = __prf_(bitmask[0 : XMSS_N], addr_as_bytes, pub_seed);

    // set_key_and_mask(addr, 2);
    () = #unspill(addr);
    addr = __set_key_and_mask(addr, 2);
    () = #spill(addr);

    // addr_to_bytes(addr_as_bytes, addr);
    addr_as_bytes = __addr_to_bytes(addr_as_bytes, addr);

    // prf(params, bitmask + params->n, addr_as_bytes, pub_seed);
    () = #unspill(pub_seed);
    bitmask[XMSS_N : XMSS_N] = __prf_(bitmask[XMSS_N : XMSS_N], addr_as_bytes, pub_seed);

    () = #unspill(in);
    i = 0;
    while (i < 2 * XMSS_N) {
        // buf[params->padding_len + params->n + i] = in[i] ^ bitmask[i];
        t = in[i];
        t ^= bitmask[i];
        buf[XMSS_PADDING_LEN + XMSS_N + i] = t;
        i += 1;
    }

    // core_hash(params, out, buf, params->padding_len + 3 * params->n);
    () = #unspill(out);
    out = _core_hash<XMSS_PADDING_LEN + 3*XMSS_N>(out, buf);

    () = #unspill(addr);

    return out, addr;
}

fn _thash_h(
    reg ptr u8[XMSS_N] out,
    reg ptr u8[2 * XMSS_N] in,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8] 
{
    out, addr = __thash_h(out, in, pub_seed, addr);
    return out, addr;
}

inline fn __thash_h_(
    reg ptr u8[XMSS_N] out,
    reg ptr u8[2 * XMSS_N] in,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8] 
{
    out = out;
    in = in;
    pub_seed = pub_seed;
    addr = addr;

    out, addr = _thash_h(out, in, pub_seed, addr);

    out = out;
    addr = addr;

    return out, addr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

// NOTE: The `in` argument is not used in this function
inline fn __thash_f(
    reg ptr u8[XMSS_N] out,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8] 
{
    stack u8[XMSS_PADDING_LEN + 2*XMSS_N] buf;
    stack u8[XMSS_N] bitmask;
    stack u8[32] addr_as_bytes;

    reg ptr u8[XMSS_PADDING_LEN] padding;

    reg u8 t;
    reg u64 i;

    // buf = XMSS_HASH_PADDING_F || PRF (addr_as_bytes)

    // Note: Having this before __ull_to_bytes simplifies the proof.
    // addr_to_bytes(addr_as_bytes, addr);
    addr_as_bytes = __addr_to_bytes(addr_as_bytes, addr);

    // ull_to_bytes(buf, params->padding_len, XMSS_HASH_PADDING_F);
    padding = buf[0:XMSS_PADDING_LEN];
    padding = __ull_to_bytes<XMSS_PADDING_LEN>(padding, XMSS_HASH_PADDING_F);
    buf[0:XMSS_PADDING_LEN] = padding;

    // set_key_and_mask(addr, 0);
    // addr = __set_key_and_mask(addr, 0);
    // NOTE: This line is now done before calling the __thash_f function => Simplifies the proof

    () = #spill(out, addr, pub_seed);

    // prf(params, buf + params->padding_len, addr_as_bytes, pub_seed);
    buf[XMSS_PADDING_LEN : XMSS_N] = __prf_(buf[XMSS_PADDING_LEN : XMSS_N], addr_as_bytes, pub_seed);

    // set_key_and_mask(addr, 1);
    () = #unspill(addr);
    addr = __set_key_and_mask(addr, 1);

    // addr_to_bytes(addr_as_bytes, addr);
    addr_as_bytes = __addr_to_bytes(addr_as_bytes, addr);
    () = #spill(addr);
   
    // prf(params, bitmask, addr_as_bytes, pub_seed);
    () = #unspill(pub_seed);
    bitmask = __prf_(bitmask, addr_as_bytes, pub_seed);

    () = #unspill(out);
    i = 0;
    while (i < XMSS_N) {
        // buf[params->padding_len + params->n + i] = in[i] ^ bitmask[i];
        t = out[i];
        t ^= bitmask[i];
        buf[XMSS_PADDING_LEN + XMSS_N + i] = t;
        i += 1;
    }

    //core_hash(params, out, buf, params->padding_len + 2 * params->n);
    out = __core_hash_<XMSS_PADDING_LEN + 2*XMSS_N>(out, buf);

    () = #unspill(addr);

    return out, addr;
}

fn _thash_f(
    reg ptr u8[XMSS_N] out,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8] 
{
    out, addr = __thash_f(out, pub_seed, addr);
    return out, addr;
}

inline fn __thash_f_(
    reg ptr u8[XMSS_N] out,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8] 
{
    out = out;
    pub_seed = pub_seed;
    addr = addr;

    out, addr = _thash_f(out, pub_seed, addr);

    out = out;
    addr = addr;

    return out, addr;
}
