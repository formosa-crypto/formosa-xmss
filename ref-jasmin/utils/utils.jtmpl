inline fn __ull_to_bytes<OUTLEN>(
  reg ptr u8[OUTLEN] out,
  reg u64 in
) -> reg ptr u8[OUTLEN]
{
  inline int i;

  for i=OUTLEN-1 downto -1 {
    out[i] = (8u) in;
    in >>= 8;
  }

  return out;
}//<>

inline fn __bytes_to_ull<INLEN>(reg ptr u8[INLEN] in) -> reg u64 {
  inline int i;
  reg u64 result t;

  result = 0;
  for i=0 to INLEN - 1 {
    t = (64u) in[i];
    result |= t;
    result <<= 8;
  } 

  t = (64u) in[INLEN - 1];
  result |= t;

  return result;
}//<>

////////////////////////////////////////////////////////////////////////////////////////////////////

fn _zero_address(reg ptr u32[8] addr) -> reg ptr u32[8] {
    inline int i;
    for i=0 to 8/2 { addr[u64 i] = 0; }
    return addr;
}

inline fn __zero_address(reg ptr u32[8] addr) -> reg ptr u32[8] {
    addr = addr;
    addr = _zero_address(addr);
    addr = addr;
    return addr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

fn _memset<INLEN>(reg ptr u8[INLEN] a, reg u8 val) -> reg ptr u8[INLEN] {
    reg u64 i;
    
    i=0;
    while (i < INLEN) { a[i] = val; i += 1;} 
    
    return a;
}//<>

inline fn __memset<INLEN>(reg ptr u8[INLEN] a, reg u8 val) -> reg ptr u8[INLEN] {
    a = a;
    a = _memset<INLEN>(a, val);
    a = a;
    return a;
}//<>
