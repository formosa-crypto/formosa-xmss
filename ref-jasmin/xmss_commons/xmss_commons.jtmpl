from XMSS require "hash/hash.jtmpl"
from XMSS require "wots/wots.jtmpl"

from Stdlib require "memcpy/memcpy.jtmpl"
from Stdlib require "memcmp/memcmp.jinc"
from Stdlib require "memset/memset.jtmpl"

inline fn __l_tree(
    reg ptr u8[XMSS_N] leaf,
    reg ptr u8[XMSS_WOTS_SIG_BYTES] wots_pk,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u8[XMSS_WOTS_SIG_BYTES], reg ptr u32[8]
{
    stack u8[XMSS_N] buf0;
    stack u8[2 * XMSS_N] buf1;

    reg u32 tree_index height;
    reg u64 t l parent_nodes;
    reg u64 offset_in offset_out bytes;
    reg u64 i in_index out_index;

    inline int j;

    stack u8[XMSS_WOTS_SIG_BYTES] debug;

    // unsigned int l = params->wots_len;
    l = XMSS_WOTS_LEN;

    // uint32_t height = 0;
    height = 0;

    () = #spill(leaf, wots_pk, pub_seed, height);

    // set_tree_height(addr, height);
    addr = __set_tree_height(addr, height);

    while (l > 1) {
        // parent_nodes = l >> 1;
        parent_nodes = l;
        ?{}, parent_nodes = #SHR(parent_nodes, 1);

        () = #spill(l);

        i = 0;
        while (i < parent_nodes) {
            () = #spill(i, parent_nodes);

            // set_tree_index(addr, i);
            tree_index = (32u) i;
            addr = __set_tree_index(addr, tree_index);

            // thash_h(params, wots_pk + i*params->n, wots_pk + (i*2)*params->n, pub_seed, addr);

            // First we need to copy wots_pk + i*params->n and wots_pk + (i*2)*params->n to the respective buffers
            () = #unspill(wots_pk);
            offset_out = 0;
            offset_in = i * XMSS_N;
            bytes = XMSS_N;
            buf0, _, _ = __memcpy_u8u8_2<XMSS_N, XMSS_WOTS_SIG_BYTES>(buf0, offset_out, wots_pk, offset_in, bytes);

            offset_out = 0;
            offset_in = (i * 2); offset_in *= XMSS_N;
            bytes = 2 * XMSS_N;
            buf1, _, _ = __memcpy_u8u8_2<2 * XMSS_N, XMSS_WOTS_SIG_BYTES>(buf1, offset_out, wots_pk, offset_in, bytes);

            () = #unspill(pub_seed);
            buf0, addr = __thash_h(buf0, buf1, pub_seed, addr);

            // Copy the result back to wots_pk: same as memcpy(wots_pk + i*XMSS_N, buf0, XMSS_N)
            () = #unspill(i, wots_pk);
            offset_out = i * XMSS_N;
            wots_pk, _ = __memcpy_u8u8<XMSS_WOTS_SIG_BYTES, XMSS_N>(wots_pk, offset_out, buf0);
            () = #spill(wots_pk);

            () = #unspill(parent_nodes);
            i += 1;
        }

        // if (l & 1)
        () = #unspill(l);
        t = l;
        t &= 1;
        if (t != 0) {
            // memcpy(wots_pk + (l >> 1)*params->n, wots_pk + (l - 1)*params->n, params->n);
            // offset out = (l >> 1) * XMSS_N
            // offset_in = (l - 1) * XMSS_N
            () = #unspill(wots_pk);
            offset_out = l; ?{}, offset_out = #SHR(offset_out, 1); offset_out *= XMSS_N;
            offset_in = l; offset_in -= 1; offset_in *= XMSS_N;
            for j = 0 to XMSS_N { wots_pk[offset_out + j] = wots_pk[offset_in + j]; }
            () = #spill(wots_pk);

            // l = (l >> 1) + 1;
            ?{}, l = #SHR(l, 1);
            l += 1;
        } else {
            // l = l >> 1;
            ?{}, l = #SHR(l, 1);
        }

        // height++;
        // set_tree_height(addr, height);
        () = #unspill(height);
        
        height += 1;
        addr = __set_tree_height(addr, height);

        () = #spill(height);
    }

    // memcpy(leaf, wots_pk, params->n);
    () = #unspill(leaf, wots_pk);
    offset_out = 0;
    leaf, _ =  _x_memcpy_u8u8<XMSS_N, XMSS_N>(leaf, offset_out, wots_pk[0: XMSS_N]);

    return leaf, wots_pk, addr;
}

fn _l_tree(
    reg ptr u8[XMSS_N] leaf,
    reg ptr u8[XMSS_WOTS_SIG_BYTES] wots_pk,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u8[XMSS_WOTS_SIG_BYTES], reg ptr u32[8]
{
    leaf, wots_pk, addr = __l_tree(leaf, wots_pk, pub_seed, addr);
    return leaf, wots_pk, addr;
}

inline fn __l_tree_(
    reg ptr u8[XMSS_N] leaf,
    reg ptr u8[XMSS_WOTS_SIG_BYTES] wots_pk,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u8[XMSS_WOTS_SIG_BYTES], reg ptr u32[8]
{
    leaf = leaf;
    addr = addr;
    wots_pk = wots_pk;
    pub_seed = pub_seed;

    leaf, wots_pk, addr = _l_tree(leaf, wots_pk, pub_seed, addr);

    leaf = leaf;
    wots_pk = wots_pk;
    addr = addr;

    return leaf, wots_pk, addr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline fn __compute_root(
    reg ptr u8[XMSS_N] root,
    reg ptr u8[XMSS_N] leaf,
    reg u32 leaf_idx,
    reg u64 _auth_path_ptr,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8]
{
    stack u8[2 * XMSS_N] buffer;
    stack u8[2 * XMSS_N] thash_in;
    stack u8[2 * XMSS_N] debug;

    reg u32 t32 tree_height;
    reg u64 offset_out len;

    reg u64 i;
    inline int j;

    stack u64 auth_path_ptr;

    auth_path_ptr = _auth_path_ptr;

    () = #spill(root, leaf_idx, addr);

    // if (leafidx & 1)
    t32 = leaf_idx; t32 &= 1;
    if (t32 != 0) {
        // memcpy(buffer + params->n, leaf, params->n);
        // memcpy(buffer, auth_path, params->n);
        // i.e. buffer = auth path || leaf
        
        offset_out = XMSS_N;
        buffer, _ = _x_memcpy_u8u8<2 * XMSS_N, XMSS_N>(buffer, offset_out, leaf);

        offset_out = 0;
        len = XMSS_N;
        buffer, _ = _x_memcpy_u8u8p<2 * XMSS_N>(buffer, offset_out, auth_path_ptr, len);
    } else {
        // memcpy(buffer, leaf, params->n);
        // memcpy(buffer + params->n, auth_path, params->n);
        // i.e. buffer = leaf || auth path

        offset_out = 0;
        buffer, _ = _x_memcpy_u8u8<2 * XMSS_N, XMSS_N>(buffer, offset_out, leaf);

        offset_out = XMSS_N;
        len = XMSS_N;
        buffer, _ = _x_memcpy_u8u8p<2 * XMSS_N>(buffer, offset_out, auth_path_ptr, len);
    }
        
    // auth_path += params->n;
    auth_path_ptr += XMSS_N;

    () = #spill(pub_seed);

    // for (i = 0; i < params->tree_height - 1; i++)
    i = 0;
    while (i < XMSS_TREE_HEIGHT - 1) {
        () = #spill(i);

        // set_tree_height(addr, i);
        () = #unspill(addr);
        tree_height = (32u) i;
        addr = __set_tree_height(addr, tree_height);

        // leafidx >>= 1;
        // set_tree_index(addr, leafidx);
        () = #unspill(leaf_idx);

        ?{}, leaf_idx = #SHR_32(leaf_idx, 1);
        addr = __set_tree_index(addr, leaf_idx);

        () = #spill(addr, leaf_idx);

        // if (leafidx & 1)
        () = #unspill(pub_seed, addr);
        t32 = leaf_idx; t32 &= 1;
        if (t32 != 0) {
            // thash_h(params, buffer + params->n, buffer, pub_seed, addr);
            thash_in = #copy(buffer);
            buffer[XMSS_N : XMSS_N], addr = __thash_h(buffer[XMSS_N : XMSS_N], thash_in, pub_seed, addr);
            
            // memcpy(buffer, auth_path, params->n);
            offset_out = 0;
            len = XMSS_N;
            buffer, _ = _x_memcpy_u8u8p<2 * XMSS_N>(buffer, offset_out, auth_path_ptr, len);
        } else {
            // thash_h(params, buffer, buffer, pub_seed, addr);
            thash_in = #copy(buffer);
            buffer[0 : XMSS_N], addr = __thash_h(buffer[0 : XMSS_N], thash_in, pub_seed, addr);

            // memcpy(buffer + params->n, auth_path, params->n);
            offset_out = XMSS_N;
            len = XMSS_N;
            buffer, _ = _x_memcpy_u8u8p<2 * XMSS_N>(buffer, offset_out, auth_path_ptr, len);
        }

        () = #spill(addr);

        // auth_path += params->n;
        auth_path_ptr += XMSS_N;

        () = #unspill(i);
        i += 1;
    }

    // set_tree_height(addr, params->tree_height - 1);
    () = #unspill(addr, leaf_idx, root);
    addr = __set_tree_height(addr, XMSS_TREE_HEIGHT - 1);

    // leafidx >>= 1;
    ?{}, leaf_idx = #SHR_32(leaf_idx, 1);

    // set_tree_index(addr, leafidx);
    addr = __set_tree_index(addr, leaf_idx);

    // thash_h(params, root, buffer, pub_seed, addr);
    () = #unspill(pub_seed);

    root, addr = __thash_h(root, buffer, pub_seed, addr);

    return root, addr;
}

fn _compute_root(
    reg ptr u8[XMSS_N] root,
    reg ptr u8[XMSS_N] leaf,
    reg u32 leaf_idx,
    reg u64 auth_path_ptr,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8]
{
    root, addr = __compute_root(root, leaf, leaf_idx, auth_path_ptr, pub_seed, addr);
    return root, addr;
}

inline fn __compute_root_(
    reg ptr u8[XMSS_N] root,
    reg ptr u8[XMSS_N] leaf,
    reg u32 leaf_idx,
    reg u64 auth_path_ptr,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8]
{
    root = root;
    leaf = leaf;
    leaf_idx = leaf_idx;
    auth_path_ptr = auth_path_ptr;
    pub_seed = pub_seed;
    addr = addr;

    root, addr = _compute_root(root, leaf, leaf_idx, auth_path_ptr, pub_seed, addr);
    
    root = root;
    addr = addr;

    return root, addr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline fn __gen_leaf_wots(
    reg ptr u8[XMSS_N] leaf,
    reg ptr u8[XMSS_N] sk_seed,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] ltree_addr,
    reg ptr u32[8] ots_addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8], reg ptr u32[8]
{
    stack u8[XMSS_WOTS_SIG_BYTES] pk;

    () = #spill(leaf, sk_seed, pub_seed, ltree_addr);

    // wots_pkgen(params, pk, sk_seed, pub_seed, ots_addr);
    pk, ots_addr = __wots_pkgen(pk, sk_seed, pub_seed, ots_addr);
    () = #spill(ots_addr);

    // l_tree(params, leaf, pk, pub_seed, ltree_addr);
    () = #unspill(leaf, sk_seed, pub_seed, ltree_addr);
    leaf, _, ltree_addr = __l_tree_(leaf, pk, pub_seed, ltree_addr);
    
    () = #unspill(ots_addr);

    return leaf, ltree_addr, ots_addr;
}

fn _gen_leaf_wots(
    reg ptr u8[XMSS_N] leaf,
    reg ptr u8[XMSS_N] sk_seed,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] ltree_addr,
    reg ptr u32[8] ots_addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8], reg ptr u32[8]
{
    leaf, ltree_addr, ots_addr = __gen_leaf_wots(leaf, sk_seed, pub_seed, ltree_addr, ots_addr);
    return leaf, ltree_addr, ots_addr;
}


inline fn __gen_leaf_wots_(
    reg ptr u8[XMSS_N] leaf,
    reg ptr u8[XMSS_N] sk_seed,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] ltree_addr,
    reg ptr u32[8] ots_addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8], reg ptr u32[8]
{
    leaf = leaf;
    sk_seed = sk_seed;
    pub_seed = pub_seed;
    ltree_addr = ltree_addr;
    ots_addr = ots_addr;

    leaf, ltree_addr, ots_addr = _gen_leaf_wots(leaf, sk_seed, pub_seed, ltree_addr, ots_addr);

    leaf = leaf;
    ltree_addr = ltree_addr;
    ots_addr = ots_addr;

    return leaf, ltree_addr, ots_addr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////