from XMSS require "hash/hash.jtmpl"
from XMSS require "wots/wots.jtmpl"

from Stdlib require "memcpy/memcpy.jtmpl"
from Stdlib require "memcmp/memcmp.jinc"
from Stdlib require "memset/memset.jtmpl"

inline
fn __l_tree(
    reg ptr u8[XMSS_N] leaf,
    reg ptr u8[XMSS_WOTS_SIG_BYTES] wots_pk,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u8[XMSS_WOTS_SIG_BYTES], reg ptr u32[8]
{
    stack u8[XMSS_N] buf0;
    stack u8[2 * XMSS_N] buf1;

    reg u32 tree_index height;
    reg u64 i t l parent_nodes offset_in offset_out bytes;

    reg ptr u8[XMSS_N] tmp;

    inline int j;

    // unsigned int l = params->wots_len;
    l = XMSS_WOTS_LEN;

    // uint32_t height = 0;
    height = 0;

    () = #spill(leaf, wots_pk, pub_seed, height);

    // set_tree_height(addr, height);
    addr = __set_tree_height(addr, height);

    while (l > 1) {
        // parent_nodes = l >> 1;
        parent_nodes = l;
        // ?{}, parent_nodes = #SHR(parent_nodes, 1);
        parent_nodes >>= (1 & 63);

        () = #spill(l);

        i = 0;
        while (i < parent_nodes) {
            () = #spill(i, parent_nodes);

            // set_tree_index(addr, i);
            tree_index = (32u) i;
            addr = __set_tree_index(addr, tree_index);

            // thash_h(params, wots_pk + i*params->n, wots_pk + (i*2)*params->n, pub_seed, addr);

            // First we need to copy wots_pk + i*params->n and wots_pk + (i*2)*params->n to the respective buffers
            () = #unspill(wots_pk);
            offset_in = (i * 2); offset_in *= XMSS_N;
            bytes = 2 * XMSS_N;
            buf1, _ = __memcpy_u8u8_2<2 * XMSS_N, XMSS_WOTS_SIG_BYTES>(buf1, wots_pk, offset_in, bytes);

            () = #unspill(pub_seed);
            buf0, addr = __thash_h(buf0, buf1, pub_seed, addr);

            // Copy the result back to wots_pk: same as memcpy(wots_pk + i*XMSS_N, buf0, XMSS_N)
            () = #unspill(i, wots_pk);
            offset_out = i * XMSS_N;
            wots_pk = __memcpy_u8u8_offset(wots_pk, offset_out, buf0);
            () = #spill(wots_pk);

            () = #unspill(parent_nodes);
            i += 1;
        }

        // if (l & 1)
        () = #unspill(l);
        t = l;
        t &= 1;
        if (t != 0) {
            // memcpy(wots_pk + (l >> 1)*params->n, wots_pk + (l - 1)*params->n, params->n);
            // offset out = (l >> 1) * XMSS_N
            // offset_in = (l - 1) * XMSS_N
            () = #unspill(wots_pk);
            offset_out = l; offset_out >>= (1 & 63); offset_out *= XMSS_N;
            offset_in = l; offset_in -= 1; offset_in *= XMSS_N;
            wots_pk = __nbytes_copy_inplace<XMSS_WOTS_SIG_BYTES>(wots_pk, offset_out, offset_in);
            () = #spill(wots_pk);

            // l = (l >> 1) + 1;
            l >>= (1 & 63);
            l += 1;
        } else {
            // l = l >> 1;
            l >>= (1 & 63);
        }

        // height++;
        // set_tree_height(addr, height);
        () = #unspill(height);
        
        height += 1;
        addr = __set_tree_height(addr, height);

        () = #spill(height);
    }

    // memcpy(leaf, wots_pk, params->n);
    () = #unspill(leaf, wots_pk);

    tmp = wots_pk[0: XMSS_N];
    leaf =  _x_memcpy_u8u8<XMSS_N, XMSS_N>(leaf, tmp);

    return leaf, wots_pk, addr;
}

fn _l_tree(
    reg ptr u8[XMSS_N] leaf,
    reg ptr u8[XMSS_WOTS_SIG_BYTES] wots_pk,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u8[XMSS_WOTS_SIG_BYTES], reg ptr u32[8]
{
    leaf, wots_pk, addr = __l_tree(leaf, wots_pk, pub_seed, addr);
    return leaf, wots_pk, addr;
}

inline
fn __l_tree_(
    reg ptr u8[XMSS_N] leaf,
    reg ptr u8[XMSS_WOTS_SIG_BYTES] wots_pk,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u8[XMSS_WOTS_SIG_BYTES], reg ptr u32[8]
{
    leaf = leaf;
    addr = addr;
    wots_pk = wots_pk;
    pub_seed = pub_seed;

    leaf, wots_pk, addr = _l_tree(leaf, wots_pk, pub_seed, addr);

    leaf = leaf;
    wots_pk = wots_pk;
    addr = addr;

    return leaf, wots_pk, addr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline
fn __compute_root(
    reg ptr u8[XMSS_N] root,
    reg ptr u8[XMSS_N] leaf,
    reg u32 leaf_idx,
    reg u64 _auth_path_ptr,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8]
{
    stack u8[2 * XMSS_N] buffer;
    stack u8[2 * XMSS_N] thash_in;

    reg u32 t32 tree_height;

    reg u64 i;

    stack u64 auth_path_ptr;

    auth_path_ptr = _auth_path_ptr;

    () = #spill(root, leaf_idx, addr);

    // if (leafidx & 1)
    t32 = leaf_idx; t32 &= 1;
    if (t32 != 0) {
        // memcpy(buffer + params->n, leaf, params->n);
        // memcpy(buffer, auth_path, params->n);
        // i.e. buffer = auth path || leaf
        buffer[XMSS_N : XMSS_N] = _x_memcpy_u8u8<XMSS_N, XMSS_N>(buffer[XMSS_N : XMSS_N], leaf);

        buffer[0 : XMSS_N] = _x_memcpy_u8u8p(buffer[0 : XMSS_N], auth_path_ptr);
    } else {
        // memcpy(buffer, leaf, params->n);
        // memcpy(buffer + params->n, auth_path, params->n);
        // i.e. buffer = leaf || auth path

        buffer = _x_memcpy_u8u8<2 * XMSS_N, XMSS_N>(buffer, leaf);

        buffer[XMSS_N : XMSS_N] = 
            _x_memcpy_u8u8p(buffer[XMSS_N : XMSS_N], auth_path_ptr);
    }
        
    // auth_path += params->n;
    auth_path_ptr += XMSS_N;

    () = #spill(pub_seed);

    // for (i = 0; i < params->tree_height - 1; i++)
    i = 0;
    while (i < XMSS_TREE_HEIGHT - 1) {
        () = #spill(i);

        // set_tree_height(addr, i);
        () = #unspill(addr);
        tree_height = (32u) i;
        addr = __set_tree_height(addr, tree_height);

        // leafidx >>= 1;
        // set_tree_index(addr, leafidx);
        () = #unspill(leaf_idx);

        leaf_idx >>= (1 & 31); // ?{}, leaf_idx = #SHR_32(leaf_idx, 1);
        addr = __set_tree_index(addr, leaf_idx);

        () = #spill(addr, leaf_idx);

        // if (leafidx & 1)
        () = #unspill(pub_seed, addr);
        t32 = leaf_idx; t32 &= 1;
        if (t32 != 0) {
            // thash_h(params, buffer + params->n, buffer, pub_seed, addr);
            thash_in = #copy(buffer);
            buffer[XMSS_N : XMSS_N], addr = __thash_h(buffer[XMSS_N : XMSS_N], thash_in, pub_seed, addr);
            
            // memcpy(buffer, auth_path, params->n);
            buffer[0 : XMSS_N] = _x_memcpy_u8u8p(buffer[0 : XMSS_N], auth_path_ptr);
        } else {
            // thash_h(params, buffer, buffer, pub_seed, addr);
            thash_in = #copy(buffer);
            buffer[0 : XMSS_N], addr = __thash_h(buffer[0 : XMSS_N], thash_in, pub_seed, addr);

            // memcpy(buffer + params->n, auth_path, params->n);
            buffer[XMSS_N : XMSS_N] = 
                _x_memcpy_u8u8p(buffer[XMSS_N : XMSS_N], auth_path_ptr);
        }

        () = #spill(addr);

        // auth_path += params->n;
        auth_path_ptr += XMSS_N;

        () = #unspill(i);
        i += 1;
    }

    // set_tree_height(addr, params->tree_height - 1);
    () = #unspill(addr, leaf_idx, root);
    addr = __set_tree_height(addr, XMSS_TREE_HEIGHT - 1);

    // leafidx >>= 1;
    leaf_idx >>= (1 & 31); // ?{}, leaf_idx = #SHR_32(leaf_idx, 1);

    // set_tree_index(addr, leafidx);
    addr = __set_tree_index(addr, leaf_idx);

    // thash_h(params, root, buffer, pub_seed, addr);
    () = #unspill(pub_seed);

    root, addr = __thash_h(root, buffer, pub_seed, addr);

    return root, addr;
}

fn _compute_root(
    reg ptr u8[XMSS_N] root,
    reg ptr u8[XMSS_N] leaf,
    reg u32 leaf_idx,
    reg u64 auth_path_ptr,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8]
{
    root, addr = __compute_root(root, leaf, leaf_idx, auth_path_ptr, pub_seed, addr);
    return root, addr;
}

inline
fn __compute_root_(
    reg ptr u8[XMSS_N] root,
    reg ptr u8[XMSS_N] leaf,
    reg u32 leaf_idx,
    reg u64 auth_path_ptr,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8]
{
    root = root;
    leaf = leaf;
    leaf_idx = leaf_idx;
    auth_path_ptr = auth_path_ptr;
    pub_seed = pub_seed;
    addr = addr;

    root, addr = _compute_root(root, leaf, leaf_idx, auth_path_ptr, pub_seed, addr);
    
    root = root;
    addr = addr;

    return root, addr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline
fn __new_compute_root(
    reg ptr u8[XMSS_N] root,
    reg ptr u8[XMSS_N] leaf,
    reg u32 leaf_idx,
    reg u64 _auth_path_ptr,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8]
{
    stack u8[2 * XMSS_N] thash_in;
    stack u8[XMSS_N] node;
    stack u64 _ptr;
    inline int k;

    reg u32 t;

    () = #spill(_auth_path_ptr, root, pub_seed);

    for k=0 to XMSS_TREE_HEIGHT {
        addr = __set_tree_height(addr, k);

        t = leaf_idx; t >>= (k + 1);
        addr = __set_tree_index(addr, t);

        /* OBS: TODO: Aqui posso fazer so um shift left em vez de fazer isto */
        t = leaf_idx; t >>= k;
        t &= 1;

        // set the input buffer of thash 
        if (t == 0) {
            // node || auth[k]
            #inline if (k == 0) { thash_in[0 : XMSS_N] = #copy(leaf); } else { thash_in[0 : XMSS_N] = #copy(node); }

            () = #unspill(_auth_path_ptr);
            _ptr = _auth_path_ptr; _ptr += k * XMSS_N;
            thash_in[XMSS_N : XMSS_N] = _x_memcpy_u8u8p(thash_in[XMSS_N : XMSS_N], _ptr);
        
        } else {
            #inline if (k == 0) { thash_in[XMSS_N : XMSS_N] = #copy(leaf); } else { thash_in[XMSS_N : XMSS_N] = #copy(node); }

            () = #unspill(_auth_path_ptr);
            _ptr = _auth_path_ptr; _ptr += k * XMSS_N;
            thash_in[0 : XMSS_N] = _x_memcpy_u8u8p(thash_in[0 : XMSS_N], _ptr);
        }

        // call thash 

        () = #unspill(pub_seed);
        #inline if (k == XMSS_TREE_HEIGHT - 1) {
            () = #unspill(root);
            root, addr = __thash_h(root, thash_in, pub_seed, addr);

            // The compiler rejects this program without spilling root after thash 
            // This shouldnt be needed. This is the last iteration of the loop, so we're 
            // spilling root and unspilling it immeadiatly after.
            () = #spill(root); 
        } else {
            node, addr = __thash_h(node, thash_in, pub_seed, addr);
        }
    }

    () = #unspill(root);
    return root, addr;
}

fn _new_compute_root(
    reg ptr u8[XMSS_N] root,
    reg ptr u8[XMSS_N] leaf,
    reg u32 leaf_idx,
    reg u64 auth_path_ptr,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8]
{
    root, addr = __new_compute_root(root, leaf, leaf_idx, auth_path_ptr, pub_seed, addr);
    return root, addr;
}

inline fn __new_compute_root_(
    reg ptr u8[XMSS_N] root,
    reg ptr u8[XMSS_N] leaf,
    reg u32 leaf_idx,
    reg u64 auth_path_ptr,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8]
{
    root = root;
    leaf = leaf;
    leaf_idx = leaf_idx;
    auth_path_ptr = auth_path_ptr;
    pub_seed = pub_seed;
    addr = addr;

    root, addr = _new_compute_root(root, leaf, leaf_idx, auth_path_ptr, pub_seed, addr);
    
    root = root;
    addr = addr;

    return root, addr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline
fn __gen_leaf_wots(
    reg ptr u8[XMSS_N] leaf,
    reg ptr u8[XMSS_N] sk_seed,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] ltree_addr,
    reg ptr u32[8] ots_addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8], reg ptr u32[8]
{
    stack u8[XMSS_WOTS_SIG_BYTES] pk;

    () = #spill(leaf, sk_seed, pub_seed, ltree_addr);

    // wots_pkgen(params, pk, sk_seed, pub_seed, ots_addr);
    pk, ots_addr = __wots_pkgen(pk, sk_seed, pub_seed, ots_addr);
    () = #spill(ots_addr);

    // l_tree(params, leaf, pk, pub_seed, ltree_addr);
    () = #unspill(leaf, sk_seed, pub_seed, ltree_addr);
    leaf, _, ltree_addr = __l_tree_(leaf, pk, pub_seed, ltree_addr);
    
    () = #unspill(ots_addr);

    return leaf, ltree_addr, ots_addr;
}

fn _gen_leaf_wots(
    reg ptr u8[XMSS_N] leaf,
    reg ptr u8[XMSS_N] sk_seed,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] ltree_addr,
    reg ptr u32[8] ots_addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8], reg ptr u32[8]
{
    leaf, ltree_addr, ots_addr = __gen_leaf_wots(leaf, sk_seed, pub_seed, ltree_addr, ots_addr);
    return leaf, ltree_addr, ots_addr;
}


inline
fn __gen_leaf_wots_(
    reg ptr u8[XMSS_N] leaf,
    reg ptr u8[XMSS_N] sk_seed,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] ltree_addr,
    reg ptr u32[8] ots_addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8], reg ptr u32[8]
{
    leaf = leaf;
    sk_seed = sk_seed;
    pub_seed = pub_seed;
    ltree_addr = ltree_addr;
    ots_addr = ots_addr;

    leaf, ltree_addr, ots_addr = _gen_leaf_wots(leaf, sk_seed, pub_seed, ltree_addr, ots_addr);

    leaf = leaf;
    ltree_addr = ltree_addr;
    ots_addr = ots_addr;

    return leaf, ltree_addr, ots_addr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Simplifies proof
inline
fn __set_result (
    reg u8 are_equal,
    reg u64 m_ptr mlen_ptr sm_ptr,
    stack u64 sm_offset
) -> reg u64
{
    reg u64 res bytes offset_in;
    if (are_equal != 0) {
        res = -1;

        // memset(m, 0, *mlen);
        #declassify bytes =  (u64) [mlen_ptr];
        __memset_u8_ptr(m_ptr, bytes, 0);

        // *mlen = 0;
        (u64) [mlen_ptr] = 0;
    } else {
        res = 0;

        // memcpy(m, sm, *mlen);
        #declassify bytes =  (u64) [mlen_ptr];
        offset_in = sm_offset;
        _x__memcpy_u8pu8p(m_ptr, 0, sm_ptr, offset_in, bytes);
    }

    return res;
}

inline
fn __xmssmt_core_sign_open(
    reg u64 m_ptr mlen_ptr,
    reg u64 sm_ptr smlen,
    reg ptr u8[XMSS_PK_BYTES] pk
) -> reg u64
{
    stack u8[XMSS_WOTS_SIG_BYTES] wots_pk;
    stack u8[XMSS_N] leaf root buf;
    stack u32[8] ots_addr ltree_addr node_addr;

    reg ptr u8[XMSS_N] pub_root pub_seed;

    reg u32 idx_leaf;
    reg u64 idx;
    reg u64 t64 offset_in offset_out bytes;
    reg u8 are_equal;
    reg u64 res;

    reg u32 i;
    stack u64 sm_offset;

    sm_offset = 0;

    // const unsigned char *pub_root = pk;
    pub_root = pk[0 : XMSS_N];

    // const unsigned char *pub_seed = pk + params->n;
    pub_seed = pk[XMSS_N : XMSS_N];

    // unsigned long long idx = 0;
    // idx = 0; // This assignemnt is dead

    () = #spill(mlen_ptr, m_ptr, sm_ptr, pub_seed, pub_root);

    // uint32_t ots_addr[8] = {0};
    // uint32_t ltree_addr[8] = {0};
    // uint32_t node_addr[8] = {0};
    ots_addr = __zero_address_(ots_addr);
    ltree_addr = __zero_address_(ltree_addr);
    node_addr = __zero_address_(node_addr);

    // set_type(ots_addr, XMSS_ADDR_TYPE_OTS);
    // set_type(ltree_addr, XMSS_ADDR_TYPE_LTREE);
    // set_type(node_addr, XMSS_ADDR_TYPE_HASHTREE);
    ots_addr = __set_type(ots_addr, XMSS_ADDR_TYPE_OTS);
    ltree_addr = __set_type(ltree_addr, XMSS_ADDR_TYPE_LTREE);
    node_addr = __set_type(node_addr, XMSS_ADDR_TYPE_HASHTREE);

    // *mlen = smlen - params->sig_bytes;
    t64 = smlen; t64 -= XMSS_SIG_BYTES;
    (u64) [mlen_ptr] = t64;

    // idx = bytes_to_ull(sm, params->index_bytes);
    idx = __bytes_to_ull_ptr(sm_ptr);
    () = #spill(idx);

    // memcpy(m + params->sig_bytes, sm + params->sig_bytes, *mlen);
    offset_out = XMSS_SIG_BYTES; 
    offset_in = XMSS_SIG_BYTES;
    #declassify bytes = (u64) [mlen_ptr];
    _x__memcpy_u8pu8p(m_ptr, offset_out, sm_ptr, offset_in, bytes);

    // hash_message(params, mhash, sm + params->index_bytes, pk, idx,
    //              m + params->sig_bytes - params->padding_len - 3*params->n,
    //              *mlen);
    // 
    // 1) First we need to copy the randomness from sm + params->index_bytes to buf
    t64 = sm_ptr; t64 += XMSS_INDEX_BYTES;
    buf = _x_memcpy_u8u8p(buf, t64);

    t64 = m_ptr;
    t64 += XMSS_SIG_BYTES - XMSS_PADDING_LEN - (3 * XMSS_N);

    #declassify bytes = (u64) [mlen_ptr];
    
    // NOTE: We use root instead of mhash because mhash is just a pointer to root
    #declassify root = __hash_message(root, buf, pk[0 : XMSS_N], idx, t64, bytes);

    // sm += params->index_bytes + params->n;
    t64 = XMSS_INDEX_BYTES + XMSS_N;
    sm_offset += t64;

    i = 0;
    while(i < XMSS_D) {
        () = #spill(i);
        () = #unspill(idx);

        // idx_leaf = (idx & ((1 << params->tree_height)-1));
        idx_leaf = ((1 << XMSS_TREE_HEIGHT) - 1);
        idx_leaf &= idx;   

        // idx = idx >> params->tree_height;
        idx >>= (XMSS_TREE_HEIGHT & 63);
        () = #spill(idx, idx_leaf);

        // set_layer_addr(ots_addr, i);
        // set_layer_addr(ltree_addr, i);
        // set_layer_addr(node_addr, i);
        ots_addr = __set_layer_addr(ots_addr, i);
        ltree_addr = __set_layer_addr(ltree_addr, i);
        node_addr = __set_layer_addr(node_addr, i);

        // set_tree_addr(ltree_addr, idx);
        // set_tree_addr(ots_addr, idx);
        // set_tree_addr(node_addr, idx);
        ltree_addr = __set_tree_addr(ltree_addr, idx);
        ots_addr = __set_tree_addr(ots_addr, idx);
        node_addr = __set_tree_addr(node_addr, idx);

        // set_ots_addr(ots_addr, idx_leaf);
        ots_addr = __set_ots_addr(ots_addr, idx_leaf);

        // wots_pk_from_sig(params, wots_pk, sm, root, pub_seed, ots_addr);
        () = #unspill(sm_ptr, pub_seed);
        t64 = sm_ptr; t64 += sm_offset;
        #declassify root = root;
        wots_pk, ots_addr = __wots_pk_from_sig_(wots_pk, t64, root, pub_seed, ots_addr);

        // sm += params->wots_sig_bytes;
        t64 = sm_offset;
        t64 += XMSS_WOTS_SIG_BYTES;
        sm_offset = t64;

        // set_ltree_addr(ltree_addr, idx_leaf);
        () = #unspill(idx_leaf);
        ltree_addr = __set_ltree_addr(ltree_addr, idx_leaf);

        // l_tree(params, leaf, wots_pk, pub_seed, ltree_addr);
        () = #unspill(pub_seed);
        leaf, wots_pk, ltree_addr = __l_tree_(leaf, wots_pk, pub_seed, ltree_addr);

        // // compute_root(params, root, leaf, idx_leaf, sm, pub_seed, node_addr);
        () = #unspill(idx_leaf, sm_ptr, pub_seed);
        t64 = sm_ptr; t64 += sm_offset;
        #declassify idx_leaf = idx_leaf;
        #declassify root = root;
        root, node_addr = __new_compute_root_(root, leaf, idx_leaf, t64, pub_seed, node_addr);   

        // sm += params->tree_height * params->n;
        t64 = sm_offset;
        t64 += (XMSS_TREE_HEIGHT * XMSS_N);
        sm_offset = t64;
        
        () = #unspill(i);
        i += 1;
    }
    
    // if (memcmp(root, pub_root, params->n)) { memset(m, 0, *mlen); *mlen = 0; return -1; }
    () = #unspill(pub_root);
    #declassify are_equal = __memcmp(root, pub_root);


    () = #unspill(mlen_ptr, m_ptr, sm_ptr);

    res = __set_result(are_equal, m_ptr, mlen_ptr, sm_ptr, sm_offset);

    return res;
}

fn _xmssmt_core_sign_open(
    reg u64 m_ptr mlen_ptr,
    reg u64 sm_ptr smlen,
    reg ptr u8[XMSS_PK_BYTES] pk
) -> reg u64
{
    reg u64 res;
    res = __xmssmt_core_sign_open(m_ptr, mlen_ptr, sm_ptr, smlen, pk);
    return res;
}

inline
fn __xmssmt_core_sign_open_(
    reg u64 m_ptr mlen_ptr,
    reg u64 sm_ptr smlen,
    reg ptr u8[XMSS_PK_BYTES] pk
) -> reg u64
{
    reg u64 res;
    
    m_ptr = m_ptr;
    mlen_ptr = mlen_ptr;
    sm_ptr = sm_ptr;
    smlen = smlen;
    pk = pk;

    res = _xmssmt_core_sign_open(m_ptr, mlen_ptr, sm_ptr, smlen, pk);

    res = res;

    return res;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline
fn __xmss_core_sign_open_(
    reg u64 m_ptr mlen_ptr,
    reg u64 sm_ptr smlen,
    reg ptr u8[XMSS_PK_BYTES] pk
) -> reg u64
{
    reg u64 res;
    
    m_ptr = m_ptr;
    mlen_ptr = mlen_ptr;
    sm_ptr = sm_ptr;
    smlen = smlen;
    pk = pk;

    res = _xmssmt_core_sign_open(m_ptr, mlen_ptr, sm_ptr, smlen, pk);

    res = res;

    return res;
}
