from Stdlib require "bytes/bytes.jtmpl"
from Stdlib require "conditions/conditions.jinc"
from Stdlib require "memset/memset.jtmpl"
from Stdlib require "memcpy/memcpy.jtmpl"

from XMSS require "params.jinc"
from XMSS require "hash_address/hash_address.jinc"

inline fn __treehash_array(
    reg ptr u8[XMSS_N] root,
    reg ptr u8[XMSS_TREE_HEIGHT * XMSS_N] auth_path,
    reg ptr u8[XMSS_N] sk_seed,
    reg ptr u8[XMSS_N] pub_seed,
    reg u32 leaf_idx,
    reg ptr u32[8] subtree_addr
)
{
    stack u8[(XMSS_TREE_HEIGHT + 1) * XMSS_N] _stack;   
    stack u32[(XMSS_TREE_HEIGHT + 1)] heights;
    stack u32[8] ots_addr ltree_addr node_addr;

    reg u32 tree_idx t u;
    reg u64 offset_out;

    inline u32 idx;
    inline u64 offset;

    reg bool cond;

    // uint32_t ots_addr[8] = {0};
    // uint32_t ltree_addr[8] = {0};
    // uint32_t node_addr[8] = {0};
    ots_addr = __zero_address(ots_addr);
    ltree_addr = __zero_address(ltree_addr);
    node_addr = __zero_address(node_addr);

    // copy_subtree_addr(ots_addr, subtree_addr);
    // copy_subtree_addr(ltree_addr, subtree_addr);
    // copy_subtree_addr(node_addr, subtree_addr);
    ots_addr = __copy_subtree_addr(ots_addr, subtree_addr);
    ltree_addr = __copy_subtree_addr(ltree_addr, subtree_addr);
    node_addr = __copy_subtree_addr(node_addr, subtree_addr);

    // set_type(ots_addr, XMSS_ADDR_TYPE_OTS);
    // set_type(ltree_addr, XMSS_ADDR_TYPE_LTREE);
    // set_type(node_addr, XMSS_ADDR_TYPE_HASHTREE);
    ots_addr = __set_type(ots_addr, XMSS_ADDR_TYPE_OTS);
    ltree_addr = __set_type(ltree_addr, XMSS_ADDR_TYPE_LTREE);
    node_addr = __set_type(node_addr, XMSS_ADDR_TYPE_HASHTREE);

    // unsigned int offset = 0;
    offset = 0;
    for idx=0 to (1 << XMSS_TREE_HEIGHT) {
        // set_ltree_addr(ltree_addr, idx);
        // set_ots_addr(ots_addr, idx);
        ltree_addr = __set_ltree_addr(ltree_addr, idx);
        ots_addr = __set_ots_addr(ots_addr, idx);

        // gen_leaf_wots(params, stack + offset*params->n, sk_seed, pub_seed, ltree_addr, ots_addr);
        ?? = __gen_leaf_wots(_stack[offset * XMSS_N : XMSS_N], sk_seed, pub_seed, ltree_addr, ots_addr);

        // offset++;
        // heights[offset - 1] = 0;
        offset += 1;
        heights[offset - 1] = 0;

        // If this is a node we need for the auth path...
        t = leaf_idx;
        t ^= 0x1;
        if (t == idx) {
            // memcpy(auth_path, stack + (offset - 1)*params->n, params->n);
            auth_path[0 : XMSS_N], _ = _x_memcpy_u8u8<XMSS_N, XMSS_N>(auth_path[0 : XMSS_N], 0, _stack[(offset - 1) * XMSS_N : XMSS_N]);
        }

        while {/* TODO: */} (cond) {
            /* Compute index of the new node, in the next layer. */
            // tree_idx = (idx >> (heights[offset - 1] + 1));
            t = idx;
            u = heights[offset - 1];
            u += 1;
            ?{}, t = #SHR_32(t, u);
            tree_idx = t;

            // set_tree_height(node_addr, heights[offset - 1]);
            t = heights[offset - 1];
            node_addr = __set_tree_height(node_addr, t);

            // set_tree_index(node_addr, tree_idx);
            node_addr = __set_tree_index(node_addr, tree_idx);

            // thash_h(params, stack + (offset-2)*params->n, stack + (offset-2)*params->n, pub_seed, node_addr);
            __thash_h(_stack[(offset-2)*XMSS_N : XMSS_N], _stack[(offset-2)*XMSS_N : XMSS_N], pub_seed, node_addr);

            // offset--;
            // heights[offset - 1]++;
            offset -= 1;
            heights[offset - 1] += 1;

            // if (((leaf_idx >> heights[offset - 1]) ^ 0x1) == tree_idx)
            u = heights[offset - 1];
            t = leaf_idx;
            ?{}, t = #SHR_32(t, u);
            t ^= 0x1;
            if (t == tree_idx) {
                // memcpy(auth_path + heights[offset - 1]*params->n, stack + (offset - 1)*params->n, params->n);
                offset_out = heights[offset - 1] * XMSS_N;
                auth_path, _ = _x_memcpy_u8u8<XMSS_TREE_HEIGHT * XMSS_N, XMSS_N>(auth_path, offset_out, _stack[(offset - 1) * XMSS_N : XMSS_N]);
            }
        }
    }  

    // memcpy(root, stack, params->n);
    root[0 : XMSS_N], _ = _x_memcpy_u8u8<XMSS_N, XMSS_N>(root[0 : XMSS_N], 0, _stack[0 : XMSS_N]);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Generates a XMSS key pair for a given parameter set.
 * Format sk: [(32bit) index || SK_SEED || SK_PRF || root || PUB_SEED]
 * Format pk: [root || PUB_SEED], omitting algorithm OID.
 */
inline fn  __xmss_core_keypair(
    reg ptr u8[XMSS_PK_BYTES] pk,
    reg ptr u8[XMSS_SK_BYTES] sk
) -> reg ptr u8[XMSS_PK_BYTES], reg ptr u8[XMSS_SK_BYTES]
{
    /* The key generation procedure of XMSS and XMSSMT is exactly the same.
       The only important detail is that the right subtree must be selected;
       this requires us to correctly set the d=1 parameter for XMSS. */
    pk, sk = __xmssmt_core_keypair(params, pk, sk);

    return pk, sk;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline fn __xmss_core_sign(
    reg ptr u8[XMSS_SK_BYTES] sk,
    reg u64 sm_ptr smlen_ptr,
    reg u64 m_ptr mlen
) -> reg ptr u8[XMSS_SK_BYTES]
{
    /* XMSS signatures are fundamentally an instance of XMSSMT signatures.
       For d=1, as is the case with XMSS, some of the calls in the XMSSMT
       routine become vacuous (i.e. the loop only iterates once, and address
       management can be simplified a bit).*/
    sk = __xmssmt_core_sign(sk, sm_ptr, smlen_ptr, m_ptr, mlen);
    return sk;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Derives a XMSSMT key pair for a given parameter set.
 * Seed must be 3*n long.
 * Format sk: [(ceil(h/8) bit) index || SK_SEED || SK_PRF || root || PUB_SEED]
 * Format pk: [root || PUB_SEED] omitting algorithm OID.
 */
inline fn __xmssmt_core_seed_keypair(
    reg ptr u8[XMSS_PK_BYTES] pk,
    reg ptr u8[XMSS_SK_BYTES] sk,
    reg ptr u8[3*XMSS_N] seed
) -> reg ptr u8[XMSS_PK_BYTES], reg ptr u8[XMSS_SK_BYTES]
{
    /* We do not need the auth path in key generation, but it simplifies the
       code to have just one treehash routine that computes both root and path
       in one function. */
    stack u8[XMSS_TREE_HEIGHT * XMSS_N] auth_path;
    stack u32[8] top_tree_addr;

    reg u64 offset;

    // uint32_t top_tree_addr[8] = {0};
    top_tree_addr = __zero_address(top_tree_addr);

    // set_layer_addr(top_tree_addr, params->d - 1);
    top_tree_addr = __set_layer_addr(top_tree_addr, XMSS_D - 1);

    /* Initialize index to 0. */
    // memset(sk, 0, params->index_bytes);
    // sk += params->index_bytes;
    sk[0 : XMSS_INDEX_BYTES] = __memset_u8(sk[0 : XMSS_INDEX_BYTES], 0);

    /* Initialize SK_SEED and SK_PRF. */
    // memcpy(sk + params->index_bytes, seed, 2 * params->n);
    sk[XMSS_INDEX_BYTES : 2*XMSS_N], _ = __memcpy_u8u8<2*XMSS_N, 2*XMSS_N>(sk[XMSS_INDEX_BYTES : 2*XMSS_N], 0, seed[0 : 2*XMSS_N]);

    /* Initialize PUB_SEED. */
    // memcpy(sk + params->index_bytes + 3 * params->n, seed + 2 * params->n,  params->n);
    sk[XMSS_INDEX_BYTES + 3 * XMSS_N : XMSS_N], _ = __memcpy_u8u8<XMSS_N, XMSS_N>(sk[XMSS_INDEX_BYTES + 3 * XMSS_N : XMSS_N], 0, seed[2*XMSS_N : XMSS_N]);

    // memcpy(pk + params->index_bytes + params->n, sk + params->index_bytes + 3*params->n, params->n);
    pk[XMSS_INDEX_BYTES : XMSS_N], _ = __memcpy_u8u8<XMSS_N, XMSS_N>(pk[XMSS_INDEX_BYTES : XMSS_N], sk[XMSS_INDEX_BYTES + 3 * XMSS_N : XMSS_N]);

    /* Compute root node of the top-most subtree. */
    // treehash(params, pk, auth_path, sk + params->index_bytes, pk + params->n, 0, top_tree_addr);
    __treehash_array(pk[0:XMSS_N], auth_path, sk[XMSS_INDEX_BYTES : XMSS_N], pk[XMSS_N : XMSS_N], 0, top_tree_addr);

    // Copy the root from pk to sk
    // memcpy(sk + params->index_bytes + 2*params->n, pk, params->n);
    sk[XMSS_INDEX_BYTES + 2 * XMSS_N : XMSS_N], _ = __memcpy_u8u8<XMSS_N, XMSS_N>(sk[XMSS_INDEX_BYTES + 2 * XMSS_N : XMSS_N], 0, pk[0:XMSS_N]);

    return pk, sk;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Generates a XMSSMT key pair for a given parameter set.
 * Format sk: [(ceil(h/8) bit) index || SK_SEED || SK_PRF || root || PUB_SEED]
 * Format pk: [root || PUB_SEED] omitting algorithm OID.
 */
inline fn __xmssmt_core_keypair(
    reg ptr u8[XMSS_PK_BYTES] pk,
    reg ptr u8[XMSS_SK_BYTES] sk 
) -> reg ptr u8[XMSS_PK_BYTES], reg ptr u8[XMSS_SK_BYTES]
{
    stack u8[3*XMSS_N] seed;

    seed = #randombytes(seed);
    pk, sk = __xmssmt_core_seed_keypair(pk, sk, seed);

    return pk, sk;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline fn __xmssmt_core_sign(
    reg ptr u8[XMSS_SK_BYTES] sk,
    reg u64 sm_ptr smlen_ptr,
    reg u64 m_ptr mlen
) -> reg ptr u8[XMSS_SK_BYTES], reg u64
{ 
    stack u8[XMSS_N] root;
    stack u8[32] idx_bytes_32;
    stack u32[8] ots_addr;

    reg ptr u8[XMSS_N] sk_seed sk_prf pub_root pub_seed mhash;

    reg u32 idx_leaf;
    reg u64 idx;

    reg u8 t8;
    reg u64 offset_out offset_in bytes;
    reg u64 t t64 len;

    reg u64 res;
    stack u8 returned;

    inline u64 sm_offset;
    inline int i;

    ?{}, res = #set0();
    sm_offset = 0;
    returned = 0;

    // unsigned char *mhash = root;
    mhash = root;

    // const unsigned char *sk_seed = sk + params->index_bytes;
    sk_seed = sk[XMSS_INDEX_BYTES : XMSS_N];

    // const unsigned char *sk_prf = sk + params->index_bytes + params->n;
    sk_prf = sk[XMSS_INDEX_BYTES + XMSS_N : XMSS_N];

    // const unsigned char *pub_root = sk + params->index_bytes + 2*params->n;
    pub_root = sk[XMSS_INDEX_BYTES + 2*XMSS_N : XMSS_N];

    // const unsigned char *pub_seed = sk + params->index_bytes + 3*params->n;
    pub_seed = sk[XMSS_INDEX_BYTES + 3*XMSS_N : XMSS_N];

    // uint32_t ots_addr[8] = {0};
    ots_addr = __zero_address(ots_addr);

    // set_type(ots_addr, XMSS_ADDR_TYPE_OTS);
    ots_addr = __set_type(ots_addr, XMSS_ADDR_TYPE_OTS);

    // memcpy(sm + params->sig_bytes, m, mlen);
    offset_out = XMSS_SIG_BYTES;
    offset_in = 0;
    bytes = mlen;
    _, _, _ = _x__memcpy_u8pu8p(sm, offset_out, m, offset_in, bytes);
    
    // *smlen = params->sig_bytes + mlen;
    t64 = mlen + XMSS_SIG_BYTES;
    (u64) [smlen_ptr] = t64;

    // idx = (unsigned long)bytes_to_ull(sk, params->index_bytes);
    idx = __bytes_to_ull<XMSS_INDEX_BYTES>(sk[0:XMSS_INDEX_BYTES]);

    if (idx >= ((1 << XMSS_FULL_HEIGHT) - 1)) {
        // memset(sk, 0xFF, params->index_bytes);
        sk[0:XMSS_INDEX_BYTES] = __memset_u8<XMSS_INDEX_BYTES>(sk[0:XMSS_INDEX_BYTES], 0xFF);

        // memset(sk + params->index_bytes, 0, (params->sk_bytes - params->index_bytes));
        sk[XMSS_INDEX_BYTES : XMSS_SK_BYTES - XMSS_INDEX_BYTES] = __memset_u8<XMSS_SK_BYTES - XMSS_INDEX_BYTES>(sk[XMSS_INDEX_BYTES : XMSS_SK_BYTES - XMSS_INDEX_BYTES], 0);

        // if (idx > ((1ULL << params->full_height) - 1))
        if (idx > ((1 << XMSS_FULL_HEIGHT) - 1)) {
            // We already used all one-time keys
            res = -2;
            returned = 1;
        } 

        // if ((params->full_height == 64) && (idx == ((1ULL << params->full_height) - 1))) 
        cond = // TODO:
        if () {
            // We already used all one-time keys
            res = -2;
            returned = 1;
        }
    }

    if (returned != 1) {

    // memcpy(sm, sk, params->index_bytes);
    offset_out = 0;
    _, _, _ = _x_memcpy_u8pu8(sm_ptr, offset_out, sk[0:XMSS_INDEX_BYTES]);

    // ull_to_bytes(sk, params->index_bytes, idx + 1);
    t64 = idx; t64 += 1;
    sk[0:XMSS_INDEX_BYTES] = __ull_to_bytes<XMSS_INDEX_BYTES>(sk[0:XMSS_INDEX_BYTES], t64);

    // ull_to_bytes(idx_bytes_32, 32, idx);
    idx_bytes_32 = _ull_to_bytes<32>(idx_bytes_32, idx);

    // prf(params, sm + params->index_bytes, idx_bytes_32, sk_prf);
    t64 = sm + XMSS_INDEX_BYTES;
    __prf_ptr(t64, idx_bytes_32, sk_prf);

    // hash_message(params, mhash, sm + params->index_bytes, pub_root, idx,
    //              sm + params->sig_bytes - params->padding_len - 3*params->n,
    //              mlen);
    t64 = sm + XMSS_INDEX_BYTES; // TODO: MEMCPY HERE TO LOAD RANDOMNESS
    t = sm + XMSS_SIG_BYTES - XMSS_PADDING_LEN - 3*XMSS_N;
    __hash_message_(mhash, t64, pub_root, idx, t, mlen);

    // sm += params->index_bytes + params->n;
    sm_offset += XMSS_INDEX_BYTES + XMSS_N;

    // set_type(ots_addr, XMSS_ADDR_TYPE_OTS);
    ots_addr = __set_type(ots_addr, XMSS_ADDR_TYPE_OTS);


    for i=0 to XMSS_D {
        // idx_leaf = (idx & ((1 << params->tree_height)-1));
        t64 = idx;
        t64 &= ((1 << XMSS_TREE_HEIGHT) - 1);
        idx_leaf = (32u) t64;
        
        // idx = idx >> params->tree_height;
        ?{}, idx = #SHR(idx,  XMSS_TREE_HEIGHT);

        // set_layer_addr(ots_addr, i);
        // set_tree_addr(ots_addr, idx);
        // set_ots_addr(ots_addr, idx_leaf);
        ots_addr = __set_layer_addr(ots_addr, i);
        ots_addr = __set_tree_addr(ots_addr, idx);
        ots_addr = __set_ots_addr(ots_addr, idx_leaf);

        // wots_sign(params, sm, root, sk_seed, pub_seed, ots_addr);
        // TODO: É possivel que seja preciso um memcpy aqui
        __wots_sign(sm, root, sk_seed, pub_root, ots_addr);

        // sm += params->wots_sig_bytes;
        sm_offset += XMSS_WOTS_SIG_BYTES;

        // treehash(params, root, sm, sk_seed, pub_seed, idx_leaf, ots_addr);
        // TODO: É possivel que seja preciso um memcpy aqui
        __treehash(root, sm, sk_seed, pub_seed, idx_leaf, ots_addr);

        // sm += params->tree_height*params->n;
        sm_offset += XMSS_TREE_HEIGHT * XMSS_N;
    }
    
    }

    return sk, res;
}