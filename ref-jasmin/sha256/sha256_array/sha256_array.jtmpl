from XMSS require "sha256/common/sha256_common.jinc"

inline fn __store_ref_array(reg ptr u8[32] out, stack u32[8] H) -> reg ptr u8[32]
{
  inline int i;
  reg u32 v;

  for i=0 to 8
  { v = H[i];
    v = #BSWAP_32(v); 
    out[u32 i] = v; // (u32)[out + i*4] = v;
  }
  return out;
}

fn _blocks_0_ref<INLEN>(
  reg ptr u32[8] _H, 
  reg ptr u8[INLEN] in,
  reg u64 inlen
) -> reg ptr u32[8], reg u64, reg u64
{
  inline int t;
  reg u32 T1 T2 a b c d e f g h r v;
  reg u64 offset index;
  stack u32[64] W;
  reg ptr u32[64] Kp;
  stack ptr u32[8] Hp;
  reg ptr u32[8] H;
  reg u64 tr;
  stack u64 in_s;

  offset = 0;

  Kp = SHA256_K;
  Hp = _H;

  H = Hp;

  while(inlen >= 64) {
    for t=0 to 16
    { // v = (u32)[in + t*4];
      index = offset; index >>= 2; index += t; v = in[u32 index];
      // v = in[u32 t]; // compilation error in function _blocks_0_ref_1 stack allocation: the region associated to variable in (defined at "bin/test_sha256_1.jpp", line 292 (16-18)) is partial
      v = #BSWAP_32(v);
      W[t] = v;
    }

    () = #spill(offset);

    for t=16 to 64 { W = __Wt_ref(W, t); }

    a, b, c, d, e, f, g, h, H = __load_H_ref(H);
    Hp = H;

    tr = 0;
    while(tr < 64)
    {
      //T1 = h + BSIG1(e) + CH(e,f,g) + Kt + Wt
      T1  = h;
      r   = __BSIG1_ref(e);
      T1 += r;
      r   = __CH_ref(e,f,g);
      T1 += r;
      T1 += Kp[tr];
      T1 += W[tr];

      //T2 = BSIG0(a) + MAJ(a,b,c)
      T2  = __BSIG0_ref(a);
      r   = __MAJ_ref(a,b,c);
      T2 += r;

      h  = g;
      g  = f;
      f  = e;
      e  = d;
      e += T1;
      d  = c;
      c  = b;
      b  = a;
      a  = T1;
      a += T2;

      tr+= 1;
    }

    H = Hp;
    a += H[0];
    b += H[1];
    c += H[2];
    d += H[3];
    e += H[4];
    f += H[5];
    g += H[6];
    h += H[7];

    H = __store_H_ref(H,a,b,c,d,e,f,g,h);

    () = #unspill(offset);
    offset += 64;
    inlen -= 64;
  }

  _H = H;
  
  return _H, inlen, offset;
}//<>

inline fn __lastblocks_ref<INLEN>(reg ptr u8[INLEN] in, reg u64 inlen offset bits) -> stack u32[32], reg u64
{
  stack u32[32] sblocks;
  inline int k;
  reg u64 i j nblocks;
  reg u8 v;

  reg u64 index;

  i = 0;

  // Zero-fill the sblocks array
  for k = 0 to 32 { sblocks[k] = i; }

  // copy in to sblocks
  while(i < inlen)
  { 
    index = offset; index += i;
    v = in[index]; // v = (u8)[in + i];
    sblocks[u8 i] = v;
    i += 1;
  }

  // set first byte after input to 0x80 
  sblocks[u8 i] = 0x80;

  // check if one or two blocks are needed
  if(inlen < 56) // 448 / 8 = 56
  { j = (64-8); nblocks = 1; i = 63; }
  else
  { j = (128-8); nblocks = 2; i = 127; }

  while(i >= j)
  { sblocks[u8 i] = (8u) bits;
    bits >>= 8;
    i -= 1;
  }
  
  return sblocks, nblocks;
}//<>

inline fn __sha256<INLEN>(reg ptr u8[32] out, reg ptr u8[INLEN] in) -> reg ptr u8[32]
{
  reg u64 bits nblocks inlen offset;
  stack u32[8] H;
  reg ptr u32[8] Hp;
  stack u32[32] sblocks;
  reg ptr u32[32] sblocksp;

  () = #spill(out);

  inlen = INLEN;
  bits = inlen;
  bits <<= 3;
  () = #spill(bits);

  H = __initH_ref();
  Hp = H;
  Hp, inlen, offset = _blocks_0_ref<INLEN>(Hp, in, inlen);

  () = #unspill(bits);
  sblocks, nblocks = __lastblocks_ref<INLEN>(in, inlen, offset, bits);
  sblocksp = sblocks;
  Hp, _ = _blocks_1_ref(Hp, sblocksp, nblocks);

  () = #unspill(out);
  H = Hp;
  out = __store_ref_array(out, H);
  return out;
}//<>
