inline 
fn __u32_to_bytes(reg ptr u8[4] out, reg u32 in) -> reg ptr u8[4] {
  in = #BSWAP_32(in);
  out.[u32 0] = in; // unaligned access
  return out;
}

inline
fn __bytes_to_ull(reg ptr u8[XMSS_INDEX_BYTES] in) -> reg u64 {
  reg u64 result i t u;

  result = 0;
  i = 0;
  while (i < XMSS_INDEX_BYTES) {

    t = (64u) in[i];

    u = XMSS_INDEX_BYTES - 1;
    u -= i;
    u <<= 3;
    t <<= u & 63;

    result |= t;

    i += 1;
  }

  return result;
}

inline
fn __bytes_to_ull_ptr(reg u64 in_ptr) -> reg u64 {
  reg u64 result i t u;

  result = 0;
  i = 0;
  while (i < XMSS_INDEX_BYTES) {
    t = (64u) (u8) [in_ptr + i];

    u = XMSS_INDEX_BYTES - 1;
    u -= i;
    u <<= 3;
    t <<= u & 63;

    result |= t;

    i += 1;
  }

  return result;
}

namespace bytes_n {
  param int OUTLEN = XMSS_N;
  require "__bytes.jinc"
}

namespace bytes_pad {
  param int OUTLEN = XMSS_PADDING_LEN;
  require "__bytes.jinc"
}

namespace bytes_32 {
  param int OUTLEN = 32;
  require "__bytes.jinc"
}

namespace bytes_idx {
  param int OUTLEN = XMSS_INDEX_BYTES;
  require "__bytes.jinc"
}

namespace bytes_wots_checksum {
  param int OUTLEN = (XMSS_WOTS_LEN2 * XMSS_WOTS_LOG_W + 7) / 8;
  require "__bytes.jinc"
}

////////////////////////////////////////////////////////////////////////////////////////////////////
