inline fn __u32_to_bytes(reg ptr u8[4] out, reg u32 in) -> reg ptr u8[4] {
  in = #BSWAP_32(in);
  out.[u32 0] = in; // unaligned access
  return out;
}

inline fn __ull_to_bytes<OUTLEN>(
  reg ptr u8[OUTLEN] out,
  reg u64 in
) -> reg ptr u8[OUTLEN]
{
  // if OUTLEN == 4 { 
  //   out[u64 0] = in; 
  // } else if OUTLEN == 32 { 
  //   out[u64 0] = in; 
  //   out[u64 1] = 0; 
  //   out[u64 2] = 0; 
  //   out[u64 3] = 0; 
  // }

  inline int i;

  for i=OUTLEN-1 downto -1 {
    out[i] = (8u) in;
    in >>= 8;
  }

  return out;
}//<>

inline fn __bytes_to_ull(reg ptr u8[XMSS_INDEX_BYTES] in) -> reg u64 {
  reg u64 result i t u;

  result = 0;
  i = 0;
  while (i < XMSS_INDEX_BYTES) {
    // retval |= ((unsigned long long)in[i]) << (8*(inlen - 1 - i));
    // 
    // t : ((unsigned long long)in[i])
    // u : (8*(inlen - 1 - i))

    t = (64u) in[i];

    u = XMSS_INDEX_BYTES - 1;
    u -= i;
    ?{}, u = #SHL(u, 3); // same as u *= 8

    ?{}, t = #SHL(t, u);

    result |= t;

    i += 1;
  }

  return result;
}

inline fn __bytes_to_ull_ptr(reg u64 in_ptr inlen) -> reg u64 {
  reg u64 result i t u;

  result = 0;
  i = 0;
  while (i < inlen) {
    // retval |= ((unsigned long long)in[i]) << (8*(inlen - 1 - i));
    // 
    // t : ((unsigned long long)in[i])
    // u : (8*(inlen - 1 - i))

    t = (64u) (u8) [in_ptr + i];

    u = inlen;
    u -= 1;
    u -= i;
    ?{}, u = #SHL(u, 3); // same as u *= 8

    ?{}, t = #SHL(t, u);

    result |= t;

    i += 1;
  }

  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
