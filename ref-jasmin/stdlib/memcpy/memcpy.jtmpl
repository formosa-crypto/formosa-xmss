// Same as out[offset_out : XMSS_N] = #copy(in[offset_in : XMSS_N]) 
// (we cant use #copy because offset_* are not known at compile time)
//
// pre conditions: no accesses are out of bounds : i.e.
//  0 <= offset_out + XMSS_N < size out /\ 0 <= offset_in + XMSS_N < size in 
//
// post condition: sub out offset_out XMSS_N = sub in offset_in XMSS_N 
inline fn __nbytes_copy_offset<OUTLEN, INLEN>(
    reg ptr u8[OUTLEN] out,
    reg u64 offset_out,
    reg ptr u8[INLEN] in,
    reg u64 offset_in
) -> reg ptr u8[OUTLEN]
{
    // TODO: XMSS_N is either 24, 32 or 64 (all divisible by 4), meaning that we can 
    //       copy 4 bytes (i.e a u64) at a time

    inline int i;

    for i=0 to XMSS_N {
        out[offset_out + i] = in[offset_in + i];
    }

    // for i=0 to XMSS_N / 4 { out.[u64 (offset_out + i)] = in.[u64 (offset_in + i)]; }

    return out;
}//<>

inline fn __nbytes_copy_inplace<OUTLEN>(
    reg ptr u8[OUTLEN] out,
    reg u64 offset_out,
    reg u64 offset_in
) -> reg ptr u8[OUTLEN]
{
    // TODO: XMSS_N is either 24, 32 or 64 (all divisible by 4), meaning that we can 
    //       copy 4 bytes (i.e a u64) at a time

    inline int i;

    for i=0 to XMSS_N {
        out[offset_out + i] = out[offset_in + i];
    }

    // for i=0 to XMSS_N / 4 { out.[u64 (offset_out + i)] = in.[u64 (offset_in + i)]; }

    return out;
}//<>

////////////////////////////////////////////////////////////////////////////////////////////////////

inline fn __memcpy_u8u8_offset(
    reg ptr u8[XMSS_WOTS_SIG_BYTES] out,
    reg u64 offset,
    reg ptr u8[XMSS_N] in
) -> reg ptr u8[XMSS_WOTS_SIG_BYTES]
{
    reg u64 i;
    
    i = 0;
    while (i < XMSS_N) {
        out[offset] = in[i];
        i += 1;
        offset += 1;
    }

    return out;
}//<>

inline fn __memcpy_u8u8<OUTLEN, INLEN>(
    reg ptr u8[OUTLEN] out,
    reg ptr u8[INLEN] in
) -> reg ptr u8[OUTLEN]
{
    reg u64 i;
    
    i = 0;
    while (i < INLEN) {
        out[i] = in[i];
        i += 1;
    }

    return out;
}//<>

#[returnaddress="stack"]
fn _memcpy_u8u8<OUTLEN,INLEN>(
    reg ptr u8[OUTLEN] out,
    reg ptr u8[INLEN] in
) -> reg ptr u8[OUTLEN]
{
    out = __memcpy_u8u8<OUTLEN,INLEN>(out, in);
    return out;
}//<>

inline fn _x_memcpy_u8u8<OUTLEN,INLEN>(
    reg ptr u8[OUTLEN] out,
    reg ptr u8[INLEN] in
) -> reg ptr u8[OUTLEN]
{
    out = out;
    in = in;

    out = _memcpy_u8u8<OUTLEN,INLEN>(out, in);

    out = out;

    return out;
}//<>

////////////////////////////////////////////////////////////////////////////////////////////////////

inline fn __memcpy_u8u8p(
    reg ptr u8[XMSS_N] out,
    reg u64 in_ptr
) -> reg ptr u8[XMSS_N]
{
    inline int i;

    for i = 0 to XMSS_N {
        out[i] = (u8) [in_ptr + i];
    }

    return out;
}

#[returnaddress="stack"]
fn _memcpy_u8u8p(
    reg ptr u8[XMSS_N] out,
    reg u64 in_ptr
) -> reg ptr u8[XMSS_N]
{
    out = __memcpy_u8u8p(out, in_ptr);
    return out;
}

inline fn _x_memcpy_u8u8p(
    reg ptr u8[XMSS_N] out,
    reg u64 in_ptr
) -> reg ptr u8[XMSS_N]
{
    out = out;
    in_ptr = in_ptr;

    out = _memcpy_u8u8p(out, in_ptr);

    out = out;
  
    return out;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

// Same as _x_memcpy_u8u8 but with offset in and out

inline fn __memcpy_u8u8_2<OUTLEN,INLEN>(
    reg ptr u8[OUTLEN] out,
    reg ptr u8[INLEN] in,
    reg u64 in_offset,
    reg u64 bytes
) -> reg ptr u8[OUTLEN], reg u64
{
    reg u64 i;

    i = 0;
    while (i < bytes) {
        // out[out_offset] = in[in_offset];
        out[i] = in[in_offset];
        i += 1;
        in_offset += 1;
    }

    return out, in_offset;
}//<>

inline fn __memcpy_u8u8_3<OUTLEN,INLEN>(
    reg ptr u8[OUTLEN] out,
    reg ptr u8[INLEN] in,
    reg u64 out_offset,
    inline int bytes
) -> reg ptr u8[OUTLEN]
{
    inline int i;

    for i=0 to bytes {
        // out[out_offset] = in[in_offset];
        out[out_offset + i] = in[i];
    }

    return out;
}//<>

////////////////////////////////////////////////////////////////////////////////////////////////////

// Same as before but u8pu8p

inline fn __memcpy_u8pu8p(
    reg u64 out_ptr,
    reg u64 out_offset,
    reg u64 in_ptr,
    reg u64 in_offset,
    reg u64 bytes
)
{
    reg u64 i;

    i = 0;
    
    while(i < bytes) {
        (u8) [out_ptr + out_offset] = (u8) [in_ptr + in_offset];
        i += 1;
        in_offset += 1;
        out_offset += 1;
    }
}

fn _memcpy_u8pu8p(
    reg u64 out_ptr,
    reg u64 out_offset,
    reg u64 in_ptr,
    reg u64 in_offset,
    reg u64 bytes
)
{
    __memcpy_u8pu8p(out_ptr, out_offset, in_ptr, in_offset, bytes);
}

inline fn _x__memcpy_u8pu8p(
    reg u64 out_ptr,
    reg u64 out_offset,
    reg u64 in_ptr,
    reg u64 in_offset,
    reg u64 bytes
)
{
    out_ptr = out_ptr;
    out_offset = out_offset;
    in_ptr = in_ptr;
    in_offset = in_offset;
    bytes = bytes;

    _memcpy_u8pu8p(out_ptr, out_offset, in_ptr, in_offset, bytes);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

inline fn __memcpy_u8pu8<INLEN>(reg u64 out offset, reg ptr u8[INLEN] in) -> reg u64, reg u64 {
    reg u64 i;

    i = 0;
    while (i < INLEN) {
        (u8) [out + offset] = in[i];
        offset += 1;
        i += 1;
    }

    return out, offset;
}//<>

#[returnaddress="stack"]
fn _memcpy_u8pu8<INLEN>(reg u64 out offset, reg ptr u8[INLEN] in) -> reg u64, reg u64 {
    out, offset = __memcpy_u8pu8<INLEN>(out, offset, in);
    return out, offset;
}//<>

inline fn _x_memcpy_u8pu8<INLEN>(reg u64 out offset, reg ptr u8[INLEN] in) -> reg u64, reg u64 {
    out = out;
    offset = offset;
    in = in;

    out, offset = _memcpy_u8pu8<INLEN>(out, offset, in);

    out = out;
    offset = offset;
    return out, offset;
}//<>
