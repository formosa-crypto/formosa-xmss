////////////////////////////////////////////////////////////////////////////////////////////////////

inline fn __memcpy_u8u8<OUTLEN, INLEN>(
    reg ptr u8[OUTLEN] out,
    reg u64 offset,
    reg ptr u8[INLEN] in
) -> reg ptr u8[OUTLEN], reg u64
{
    reg u64 i;
    
    i = 0;
    while( i < INLEN) {
        out[offset] = in[i];
        i += 1;
        offset += 1;
    }

    return out, offset;
}//<>

#[returnaddress="stack"]
fn _memcpy_u8u8<OUTLEN,INLEN>(
    reg ptr u8[OUTLEN] out,
    reg u64 offset,
    reg ptr u8[INLEN] in
) -> reg ptr u8[OUTLEN], reg u64
{
    out, offset = __memcpy_u8u8<OUTLEN,INLEN>(out, offset, in);
    return out, offset;
}//<>

inline fn _x_memcpy_u8u8<OUTLEN,INLEN>(
    reg ptr u8[OUTLEN] out,
    reg u64 offset,
    reg ptr u8[INLEN] in
) -> reg ptr u8[OUTLEN], reg u64
{
    out = out;
    offset = offset;
    in = in;

    out, offset = _memcpy_u8u8<OUTLEN,INLEN>(out, offset, in);

    out = out;
    offset = offset;

    return out, offset;
}//<>

////////////////////////////////////////////////////////////////////////////////////////////////////

inline fn __memcpy_u8u32<OUTLEN,INLEN>(
    reg ptr u8[OUTLEN] out,
    reg u64 offset,
    reg ptr u32[INLEN] in
) -> reg ptr u8[OUTLEN], reg u64
{
  reg u64 i;

    i = 0;
    while( i < INLEN * 4) {
      out[offset] = in[u8 i];
      i += 1;
      offset += 1;
    }

    return out, offset;
}//<>

#[returnaddress="stack"]
fn _memcpy_u8u32<OUTLEN,INLEN>(
    reg ptr u8[OUTLEN] out,
    reg u64 offset,
    reg ptr u32[INLEN] in
) -> reg ptr u8[OUTLEN], reg u64
{
    out, offset = __memcpy_u8u32<OUTLEN,INLEN>(out, offset, in);
    return out, offset;
}//<>

inline fn _x_memcpy_u8u32<OUTLEN,INLEN>(
    reg ptr u8[OUTLEN] out,
    reg u64 offset,
    reg ptr u32[INLEN] in
) -> reg ptr u8[OUTLEN], reg u64
{
    out = out;
    offset = offset;
    in = in;

    out, offset = _memcpy_u8u32<OUTLEN,INLEN>(out, offset, in);

    out = out;
    offset = offset;

    return out, offset;
}//<>

////////////////////////////////////////////////////////////////////////////////////////////////////

inline fn __memcpy_u8u8p<OUTLEN>(
  reg ptr u8[OUTLEN] out,
  reg u64 offset,
  reg u64 in,
  reg u64 inlen)
  ->
  reg ptr u8[OUTLEN], reg u64
{
  reg u64 i;

  i = 0;
  while( i < inlen ) {
    out[offset] = (u8)[in + i];
    i += 1;
    offset += 1;
  }

  return out, offset;
}//<>

#[returnaddress="stack"]
fn _memcpy_u8u8p<OUTLEN>(
  reg ptr u8[OUTLEN] out,
  reg u64 offset,
  reg u64 in,
  reg u64 inlen)
  ->
  reg ptr u8[OUTLEN], reg u64
{
  out, offset = __memcpy_u8u8p<OUTLEN>(out, offset, in, inlen);
  return out, offset;
}//<>

inline fn _x_memcpy_u8u8p<OUTLEN>(
  reg ptr u8[OUTLEN] out,
  reg u64 offset,
  reg u64 in,
  reg u64 inlen)
  ->
  reg ptr u8[OUTLEN], reg u64
{
  out = out;
  offset = offset;
  in = in;

  out, offset = _memcpy_u8u8p<OUTLEN>(out, offset, in, inlen);

  out = out;
  offset = offset;
  return out, offset;
}//<>
