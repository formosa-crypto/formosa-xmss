from Stdlib require "memcpy/memcpy.jtmpl"
from Stdlib require "memswap/memswap.jtmpl"

require "xmss_fast_state_getset.jinc"
require "xmss_fast_state.jinc"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////// XMSS CORE KEY PAIR
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Generates a XMSS key pair for a given parameter set.
 * Format sk: [(32bit) idx || SK_SEED || SK_PRF || root || PUB_SEED]
 * Format pk: [root || PUB_SEED] omitting algo oid.
 */
inline fn __xmss_core_keypair_jazz(
    reg ptr u8[XMSS_PK_BYTES] pk, 
    reg ptr u8[XMSS_FAST_SK_BYTES] sk,
) -> reg ptr u8[XMSS_PK_BYTES], reg ptr u8[XMSS_FAST_SK_BYTES]
{
    stack u32[8] addr;

    // uint32_t addr[8] = {0};
    addr = __zero_address_(addr);

    // Set idx = 0
    // sk[0] = 0;
    // sk[1] = 0;
    // sk[2] = 0;
    // sk[3] = 0;
    sk[u32 0] = 0;

    // Init SK_SEED (n byte) and SK_PRF (n byte)
    // randombytes(sk + params->index_bytes, 2*params->n);
    sk[XMSS_INDEX_BYTES : 2 * XMSS_N] = #randombytes(sk[XMSS_INDEX_BYTES : 2 * XMSS_N]);

    // Init PUB_SEED (n byte)
    // randombytes(sk + params->index_bytes + 3*params->n, params->n);
    sk(XMSS_INDEX_BYTES + 3 * XMSS_N : XMSS_N) = #randombytes(sk(XMSS_INDEX_BYTES + 3 * XMSS_N : XMSS_N));

    // Copy PUB_SEED to public key
    // memcpy(pk + params->n, sk + params->index_bytes + 3*params->n, params->n);
    pk[XMSS_N : XMSS_N] = _x_memcpy_u8u8<XMSS_N, XMSS_N>(pk[XMSS_N : XMSS_N], sk[XMSS_INDEX_BYTES + 3 * XMSS_N : XMSS_N]);

    return pk, sk;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////// XMSS CORE SIGN 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


inline fn __xmss_core_sign(
    reg ptr u8[XMSS_FAST_SK_BYTES] sk,
    reg u64 sm_ptr smlen_ptr m_ptr mlen
) -> reg ptr u8[XMSS_FAST_SK_BYTES], reg u64
{
    reg u64 r;

    ?{}, r = #set0();

    return r;
}
