from XMSS require "hash_address/hash_address.jinc"
from XMSS require "hash/hash.jinc"

namespace basew_checksum {
  param int OUTLEN = XMSS_WOTS_LEN2;
  param int INLEN  = (XMSS_WOTS_LEN2 * XMSS_WOTS_LOG_W + 7) / 8;
  require "__basew.jinc"
}

namespace basew_chain_lengths {
  param int OUTLEN = XMSS_WOTS_LEN1;
  param int INLEN = XMSS_N;
  require "__basew.jinc"
}

inline
fn __expand_seed(
    reg ptr u8[XMSS_WOTS_LEN * XMSS_N] outseeds,
    reg ptr u8[XMSS_N] inseed,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_WOTS_LEN * XMSS_N], reg ptr u32[8]
{  
    reg ptr u8[XMSS_N] ith_seed;
    reg ptr u8[32] addr_bytes;

    // NOTE: BUF = pub_seed || addr_as_bytes
    stack u8[XMSS_N + 32] buf;
    inline int i;

    () = #spill(outseeds, inseed);

    // set_hash_addr(addr, 0);
    // set_key_and_mask(addr, 0);
    addr = __set_hash_addr(addr, 0);
    addr = __set_key_and_mask(addr, 0);

    // memcpy(buf, pub_seed, params->n);
    // old: buf[0 : XMSS_N] = _x_memcpy_u8u8<XMSS_N, XMSS_N>(buf[0 : XMSS_N], pub_seed);
    buf[0 : XMSS_N] = #copy_8(pub_seed);

    for i = 0 to XMSS_WOTS_LEN {
        // NOTE: addr is live at the beggining of the loop => we must unspill it at the end
        // set_chain_addr(addr, i);
        addr = __set_chain_addr(addr, i);
        () = #spill(addr);

        // addr_to_bytes(buf + params->n, addr);
        addr_bytes = buf[XMSS_N : 32];
        addr_bytes = __addr_to_bytes(addr_bytes, addr);
        buf[XMSS_N : 32] = addr_bytes;

        () = #unspill(outseeds, inseed);
        ith_seed = outseeds[i * XMSS_N : XMSS_N];
        ith_seed = __prf_keygen_(ith_seed, buf, inseed);
        outseeds[i * XMSS_N : XMSS_N] = ith_seed;
        () = #spill(outseeds);
        () = #unspill(addr);
    }

    () = #unspill(outseeds);

    return outseeds, addr;
}

fn _expand_seed(
    reg ptr u8[XMSS_WOTS_LEN * XMSS_N] outseeds,
    reg ptr u8[XMSS_N] inseed,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_WOTS_LEN * XMSS_N], reg ptr u32[8]
{
    outseeds, addr = __expand_seed(outseeds, inseed, pub_seed, addr);
    return outseeds, addr;
}

inline 
fn __expand_seed_(
    reg ptr u8[XMSS_WOTS_LEN * XMSS_N] outseeds,
    reg ptr u8[XMSS_N] inseed,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_WOTS_LEN * XMSS_N], reg ptr u32[8]
{
    outseeds = outseeds;
    inseed = inseed;
    pub_seed = pub_seed;
    addr = addr;

    outseeds, addr = _expand_seed(outseeds, inseed, pub_seed, addr);
    
    outseeds = outseeds;
    addr = addr;

    return outseeds, addr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline
fn __gen_chain_inplace(
    reg ptr u8[XMSS_N] out, // Also in
    reg u32 start steps, 
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8]
{
    reg u32 i t;

    () = #spill(out, pub_seed, addr);

    // for (i = start; i < (start+steps) && i < params->wots_w; i++)
    i = start;
    t = start; t += steps; 
    while (i < t) {
        () = #spill(i, t);

        // set_hash_addr(addr, i);
        () = #unspill(addr);
        addr = __set_hash_addr(addr, i);

        // NOTE: This line was inside __thash_f_ but having it here simplifies the proof
        addr = __set_key_and_mask(addr, 0);
        
        () = #unspill(pub_seed, out);
        out, addr  = __thash_f_(out, pub_seed, addr);

        () = #spill(out, addr);

        () = #unspill(i, t);
        i += 1;
    }

    () = #unspill(addr);

    return out, addr;
}

fn _gen_chain_inplace(
    reg ptr u8[XMSS_N] out,
    reg u32 start steps, 
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8]
{
    out, addr = __gen_chain_inplace(out, start, steps, pub_seed, addr);
    return out, addr;
}

inline
fn __gen_chain_inplace_(
    reg ptr u8[XMSS_N] out,
    reg u32 start steps,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_N], reg ptr u32[8]
{
    out = out;
    start = start;
    steps = steps;
    pub_seed = pub_seed;
    addr = addr;

    out, addr = _gen_chain_inplace(out, start, steps, pub_seed, addr);
    
    out = out;
    addr = addr;

    return out, addr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Just computes the checksum
inline
fn __csum(reg ptr u32[XMSS_WOTS_LEN1] msg_base_w) -> reg u64
{
    reg u64 csum i t u;

    csum = 0;

    // for (i = 0; i < params->wots_len1; i++) { csum += params->wots_w - 1 - msg_base_w[i]; }
    i = 0;
    while (i < XMSS_WOTS_LEN1) {
      t = XMSS_WOTS_W - 1;
      u = (64u) msg_base_w[i];
      t -= u; 
      csum += t;
      i += 1;
    }

    return csum;
}

inline
fn __wots_checksum(
    reg ptr u32[XMSS_WOTS_LEN2] csum_base_w,
    reg ptr u32[XMSS_WOTS_LEN] msg_base_w
) -> reg ptr u32[XMSS_WOTS_LEN2]
{
    stack u8[(XMSS_WOTS_LEN2 * XMSS_WOTS_LOG_W + 7) / 8] csum_bytes;
    reg ptr u8[(XMSS_WOTS_LEN2 * XMSS_WOTS_LOG_W + 7) / 8] csum_bytes_p;

    reg u64 csum u;

    inline int k;

    reg ptr u32[XMSS_WOTS_LEN1] buf;

    buf = msg_base_w[0 : XMSS_WOTS_LEN1];
    csum = __csum(buf); // Compute the checksum using only the first len1 bytes

    // csum = csum << (8 - ((params->wots_len2 * params->wots_log_w) % 8));
    k = (XMSS_WOTS_LEN2 * XMSS_WOTS_LOG_W) % 8;

    u = 8;
    u -= k; // u holds the value of (8 - ((params->wots_len2 * params->wots_log_w) % 8))
    csum <<= (u & 63);

    // ull_to_bytes(csum_bytes, sizeof(csum_bytes), csum);
    csum_bytes_p = csum_bytes;
    csum_bytes_p = bytes_wots_checksum::ull_to_bytes(csum_bytes_p, csum);

    // base_w(params, csum_base_w, params->wots_len2, csum_bytes);
    csum_base_w = basew_checksum::__base_w(csum_base_w, csum_bytes_p);

    return csum_base_w;
}

fn _wots_checksum(
    reg ptr u32[XMSS_WOTS_LEN2] csum_base_w,
    reg ptr u32[XMSS_WOTS_LEN] msg_base_w
) -> reg ptr u32[XMSS_WOTS_LEN2]
{
    csum_base_w = __wots_checksum(csum_base_w, msg_base_w);
    return csum_base_w;
}

inline
fn __wots_checksum_(
    reg ptr u32[XMSS_WOTS_LEN2] csum_base_w,
    reg ptr u32[XMSS_WOTS_LEN] msg_base_w
) -> reg ptr u32[XMSS_WOTS_LEN2]
{
    csum_base_w = csum_base_w;
    msg_base_w = msg_base_w;

    csum_base_w = _wots_checksum(csum_base_w, msg_base_w);
    
    csum_base_w = csum_base_w;
    
    return csum_base_w;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

inline
fn __chain_lengths(
    reg ptr u32[XMSS_WOTS_LEN] lengths,
    reg ptr u8[XMSS_N] msg
) -> reg ptr u32[XMSS_WOTS_LEN]
{
    reg ptr u32[XMSS_WOTS_LEN1] t0;
    reg ptr u32[XMSS_WOTS_LEN2] t1;
  
    // base_w(params, lengths, params->wots_len1, msg);
    t0 = lengths[0 : XMSS_WOTS_LEN1];
    t0 = basew_chain_lengths::__base_w(t0, msg);
    lengths[0 : XMSS_WOTS_LEN1] = t0;

    // wots_checksum(params, lengths + params->wots_len1, lengths);
    t1 = lengths[XMSS_WOTS_LEN1 : XMSS_WOTS_LEN2];
    t1 = __wots_checksum(t1, lengths);
    lengths[XMSS_WOTS_LEN1 : XMSS_WOTS_LEN2] = t1;

    return lengths;
}

fn _chain_lengths(
    reg ptr u32[XMSS_WOTS_LEN] lengths,
    reg ptr u8[XMSS_N] msg
) -> reg ptr u32[XMSS_WOTS_LEN]
{
    lengths = __chain_lengths(lengths, msg);
    return lengths;
}

inline
fn __chain_lengths_(
    reg ptr u32[XMSS_WOTS_LEN] lengths,
    reg ptr u8[XMSS_N] msg
) -> reg ptr u32[XMSS_WOTS_LEN]
{
    lengths = lengths; 
    msg = msg;
    
    lengths = _chain_lengths(lengths, msg);
    lengths = lengths;
    
    return lengths;
}

////////////////////////////////////////////////////////////////////////////////////////////////////


inline
fn __wots_pkgen(
    reg ptr u8[XMSS_WOTS_LEN * XMSS_N] pk,
    reg ptr u8[XMSS_N] seed,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_WOTS_LEN * XMSS_N], reg ptr u32[8]
{
    reg u32 chain;
    inline int i;
    reg ptr u8[XMSS_N] t; // ith seed

    () = #spill(pub_seed);

    // expand_seed(params, pk, seed, pub_seed, addr);
    pk, addr = __expand_seed_(pk, seed, pub_seed, addr);
    
    () = #spill(pk);

    for i = 0 to XMSS_WOTS_LEN {
        // set_chain_addr(addr, i);
        chain = i;
        addr = __set_chain_addr(addr, chain);

        () = #unspill(pk, pub_seed);
        t = pk[i*XMSS_N : XMSS_N];
        t, addr = __gen_chain_inplace_(t, 0, XMSS_WOTS_W - 1, pub_seed, addr);
        pk[i*XMSS_N : XMSS_N]= t;
        
        () = #spill(pk);
    }

    () = #unspill(pk);

    return pk, addr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline
fn __wots_sign(
    reg ptr u8[XMSS_WOTS_LEN * XMSS_N] sig,
    reg ptr u8[XMSS_N] msg,
    reg ptr u8[XMSS_N] seed,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_WOTS_LEN * XMSS_N], reg ptr u32[8]
{
    stack u32[XMSS_WOTS_LEN] lengths;

    reg u32 chain;
    inline int i;

    () = #spill(pub_seed);

    // chain_lengths(params, lengths, msg);
    lengths = __chain_lengths_(lengths, msg);

    // expand_seed(params, sig, seed, pub_seed, addr);
    sig, addr = __expand_seed_(sig, seed, pub_seed, addr);

    for i = 0 to XMSS_WOTS_LEN {
        // set_chain_addr(addr, i);
        chain = i;
        addr = __set_chain_addr(addr, chain);

        // gen_chain(params, sig + i * params->n, sig + i * params->n, 0, lengths[i], pub_seed, addr);
        () = #unspill(pub_seed);
        sig[i*XMSS_N : XMSS_N], addr = __gen_chain_inplace_(sig[i*XMSS_N : XMSS_N], 0, lengths[i], pub_seed, addr);
    }

    return sig, addr;
}

fn _wots_sign(
    reg ptr u8[XMSS_WOTS_LEN * XMSS_N] sig,
    reg ptr u8[XMSS_N] msg,
    reg ptr u8[XMSS_N] seed,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_WOTS_LEN * XMSS_N], reg ptr u32[8]
{
    sig, addr = __wots_sign(sig, msg, seed, pub_seed, addr);
    return sig, addr;
}

inline
fn __wots_sign_(
    reg ptr u8[XMSS_WOTS_LEN * XMSS_N] sig,
    reg ptr u8[XMSS_N] msg,
    reg ptr u8[XMSS_N] seed,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_WOTS_LEN * XMSS_N], reg ptr u32[8]
{
    sig = sig;
    msg = msg;
    seed = seed;
    pub_seed = pub_seed;
    addr = addr;

    sig, addr = _wots_sign(sig, msg, seed, pub_seed, addr);

    sig = sig;
    addr = addr;

    return sig, addr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline
fn __wots_pk_from_sig(
    reg ptr u8[XMSS_WOTS_LEN * XMSS_N] pk,
    reg u64 sig_ptr,
    reg ptr u8[XMSS_N] msg,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_WOTS_LEN * XMSS_N], reg ptr u32[8]
{
    stack u32[XMSS_WOTS_LEN] lengths;

    reg u32 chain start steps;
    reg u64 t;
    inline int i;

    () = #spill(pub_seed, sig_ptr);

    // chain_lengths(params, lengths, msg);
    lengths = __chain_lengths_(lengths, msg);

    for i=0 to XMSS_WOTS_LEN {
        // set_chain_addr(addr, i);
        chain = i;
        addr = __set_chain_addr(addr, chain);

        // gen_chain(params, pk + i * params->n, sig + i * params->n, lengths[i], params->wots_w - 1 - lengths[i], pub_seed, addr);
        () = #unspill(pub_seed, sig_ptr);
        start = lengths[i];
        steps = XMSS_WOTS_W - 1; steps -= lengths[i];
        
        t = sig_ptr; t += i*XMSS_N;
        pk[i*XMSS_N : XMSS_N] = _x_memcpy_u8u8p(pk[i*XMSS_N : XMSS_N], t);

        pk[i*XMSS_N : XMSS_N], addr = __gen_chain_inplace_(pk[i*XMSS_N : XMSS_N], start, steps, pub_seed, addr);
    }

    return pk, addr;
}

fn _wots_pk_from_sig(
    reg ptr u8[XMSS_WOTS_LEN * XMSS_N] pk,
    reg u64 sig_ptr,
    reg ptr u8[XMSS_N] msg,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_WOTS_LEN * XMSS_N], reg ptr u32[8]
{
    pk, addr = __wots_pk_from_sig(pk, sig_ptr, msg, pub_seed, addr);
    return pk, addr;
}

inline
fn __wots_pk_from_sig_(
    reg ptr u8[XMSS_WOTS_LEN * XMSS_N] pk, 
    reg u64 sig_ptr,
    reg ptr u8[XMSS_N] msg,
    reg ptr u8[XMSS_N] pub_seed,
    reg ptr u32[8] addr
) -> reg ptr u8[XMSS_WOTS_LEN * XMSS_N], reg ptr u32[8]
{
    pk = pk;
    sig_ptr = sig_ptr;
    msg = msg;
    pub_seed = pub_seed;
    addr = addr;

    pk, addr = __wots_pk_from_sig(pk, sig_ptr, msg, pub_seed, addr);

    pk = pk;
    addr = addr;

    return pk, addr;
}
