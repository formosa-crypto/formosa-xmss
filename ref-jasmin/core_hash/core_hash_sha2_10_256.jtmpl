from XMSS require "sha256/sha256_array/sha256_array.jtmpl"
from XMSS require "sha256/sha256_ptr/sha256_ptr.jinc"
from XMSS require "sha256/sha256_in_ptr/sha256_in_ptr.jtmpl"

inline fn __core_hash<INLEN>(
    reg ptr u8[XMSS_N] out, 
    reg ptr u8[INLEN] in
) -> reg ptr u8[XMSS_N] {
    out = __sha256<INLEN>(out, in);
    return out;
}//<>

fn _core_hash<INLEN>(
    reg ptr u8[XMSS_N] out,
    reg ptr u8[INLEN] in
) -> reg ptr u8[XMSS_N]
{
    out = __core_hash<INLEN>(out, in);
    return out;
}//<>

inline fn __core_hash_<INLEN>(
    reg ptr u8[XMSS_N] out,
    reg ptr u8[INLEN] in
) -> reg ptr u8[XMSS_N]
{  
    in = in; out = out;
    out = _core_hash<INLEN>(out, in);
    out = out;
    return out;
}//<>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline fn __core_hash_in_ptr(
    reg ptr u8[XMSS_N] out, 
    reg u64 in_ptr inlen
) -> reg ptr u8[XMSS_N] {
    reg ptr u8[64] buf;
    out = __sha256_in_ptr(out, in_ptr, inlen);
    return out;
}//<>

fn _core_hash_in_ptr(
    reg ptr u8[XMSS_N] out,
    reg u64 in_ptr inlen
) -> reg ptr u8[XMSS_N]
{
    out = __core_hash_in_ptr(out, in_ptr, inlen);
    return out;
}//<>

inline fn __core_hash_in_ptr_(
    reg ptr u8[XMSS_N] out,
    reg u64 in_ptr inlen
) -> reg ptr u8[XMSS_N]
{  
    out = out;
    in_ptr = in_ptr;
    inlen = inlen;
    out = _core_hash_in_ptr(out, in_ptr, inlen);
    return out;
}//<>
